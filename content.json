{"meta":{"title":"考拉动效","subtitle":"考拉前端团队 KAOLA-FED","description":"考拉前端团队动效展示网页","author":"KAOLA FED","url":"https://motionvisions.github.io"},"pages":[{"title":"about","date":"2016-12-06T09:20:50.000Z","updated":"2016-12-06T20:20:10.000Z","comments":true,"path":"about/index.html","permalink":"https://motionvisions.github.io/about/index.html","excerpt":"","text":"Welcome to visit."}],"posts":[{"title":"Canvas上绘制动画","slug":"Canvas上绘制动画","date":"2016-12-07T02:07:49.000Z","updated":"2016-12-07T02:09:02.000Z","comments":true,"path":"2016/12/07/Canvas上绘制动画/","link":"","permalink":"https://motionvisions.github.io/2016/12/07/Canvas上绘制动画/","excerpt":"","text":"Canvas.drawImage我们知道我们需要调用drawImage 在画布上去绘制一个图片，那如果我们要绘制一个动图我们需要如何实现呢？我们要获取精灵图片对应的那一帧，然后在画布上绘制。每次绘制一帧，我们需要先清空原先画布上的内容 1void ctx.drawImage(iamge. sx, sy, sWidth, sHeight, dx, dy, dWidth, dHeight) 注意: sx,sy 是指源精灵图片获取的位置， dx,dy 指的是在画布上需要对应的位置，所以我们写一个Sprite 类，这个类一般要描述下面这些信息 1234567891011121314151617181920212223242526272829303132333435var bird_opt = &#123; image: image, startX: 100, //绘制的起始坐标X startY: 100, //绘制的起始坐标Y rect: &#123;x:0,y:0,w:86,h:60&#125;, frames: [ //精灵动画每一帧的相关信息 &#123;x:0,y:0,w:86,h:60&#125;, &#123;x:0,y:60,w:86,h:60&#125;, &#123;x:0,y:120,w:86,h:60&#125; ] &#125;;function Sprite(opt)&#123; var sprite_proto = &#123;&#125;; sprite_proto.current_frame_index = 0; sprite_proto.image = opt.image; sprite_proto.rect = opt.rect; sprite_proto.frames = opt.frames; sprite_proto.startX = opt.startX; sprite_proto.startY = opt.startY; sprite_proto.getNextFrame = function()&#123; var curFrame = this.frames[this.current_frame_index]; this.current_frame_index++; if(this.current_frame_index == this.frames.length) this.current_frame_index = 0; return curFrame; &#125; return sprite_proto; &#125; 我们再创建一个绘制画布类DrawCanvas, 主要需要两个方法，一个是renderFrame（绘制精灵的某帧）, 一个是清空画布clear 1234567891011121314151617181920212223242526function DrawCanvas(opt)&#123; this.context = opt.context; this.width = opt.width; this.height = opt.height; &#125; DrawCanvas.prototype.renderFrame = function(sprite)&#123; var frame = sprite.getNextFrame(); this.context.drawImage( sprite.image, frame.x, frame.y, frame.w, frame.h, sprite.startX, sprite.startY, sprite.rect.w, sprite.rect.h ); &#125; DrawCanvas.prototype.clear = function()&#123; this.context.clearRect(0,0,this.width, this.height); &#125; 结合上面两个类，我们就可以再画布上先绘制精灵图的第一帧 1234567891011121314151617181920212223242526var image = new Image(); image.src = '/images/bird.png'; image.onload = function()&#123; var bird_opt = &#123; image: image, startX: 100, startY: 100, rect: &#123;x:0,y:0,w:86,h:60&#125;, frames: [ &#123;x:0,y:0,w:86,h:60&#125;, &#123;x:0,y:60,w:86,h:60&#125;, &#123;x:0,y:120,w:86,h:60&#125; ] &#125;, birdSprite = Sprite(bird_opt), canvas = document.getElementById('canvas'), canvas_opt = &#123; context: canvas.getContext('2d'), width:canvas.width, height:canvas.height &#125;; var myCanvas = new DrawCanvas(canvas_opt); myCanvas.renderFrame(birdSprite); &#125;; SetInterval 不断地清空画布与绘制图案我们需要绘制我们的精灵图，那么我们需要setInterval清空我们的画布，绘制对应帧数的图片。 1234567//canvas上动画的绘制是通过计时器去实现的 setInterval(function()&#123; myCanvas.clear(); myCanvas.renderFrame(birdSprite); &#125;, 200);//但其实做动画的最佳循环是使用requestAnimationFrame,所以我们换种写法 注意：我们创建我们的sprite之前我们需要预先将我们使用的图片下载完，所以我们需要 12345var image = new Image();image.src = '/images/bird.png';image.onload = function()&#123; .....&#125; 所以在下一篇文章里我们会看到相关框架里面会实现preload，预先加载所有要使用的资源然后再开始绘制。以上，就是canvas动画主要的实现原理。如果想要我们的动画在不同方向上再进行移动，即我们只要不断更改我们绘制坐标位置即可。 拓展阅读1：canvas动画优化小议 拓展阅读2：提高 HTML5 画布性能 拓展阅读里面提到我们对动画可以分层，让不同频率的动画绘制在不同的图层上，同时我们对这一次图层的变化与上一次图层的内容进行对比，找出变化的区域，这也是我们称为的脏区域，这样只要更新脏区域的内容，就能提升canvas的性能了。","categories":[{"name":"技术文章","slug":"技术文章","permalink":"https://motionvisions.github.io/categories/技术文章/"}],"tags":[{"name":"canvas","slug":"canvas","permalink":"https://motionvisions.github.io/tags/canvas/"}]},{"title":"Hello World","slug":"hello-world","date":"2016-12-06T20:20:10.000Z","updated":"2016-12-07T01:40:03.000Z","comments":true,"path":"2016/12/07/hello-world/","link":"","permalink":"https://motionvisions.github.io/2016/12/07/hello-world/","excerpt":"","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new \"My New Post\" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment Quick StartCreate a new postCreate a new postCreate a new postQuick StartCreate a new postCreate a new postCreate a new post","categories":[{"name":"技术文章","slug":"技术文章","permalink":"https://motionvisions.github.io/categories/技术文章/"}],"tags":[{"name":"ADFA tags tags","slug":"ADFA-tags-tags","permalink":"https://motionvisions.github.io/tags/ADFA-tags-tags/"}]}]}