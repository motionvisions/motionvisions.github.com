{"meta":{"title":"考拉动效","subtitle":"考拉前端团队 KAOLA-FED","description":"考拉前端团队动效展示网页","author":"KAOLA FED","url":"https://motionvisions.github.io"},"pages":[{"title":"about","date":"2016-12-06T09:20:50.000Z","updated":"2016-12-06T20:20:10.000Z","comments":true,"path":"about/index.html","permalink":"https://motionvisions.github.io/about/index.html","excerpt":"","text":"Welcome to visit."}],"posts":[{"title":"Hilo 阿里H5游戏引擎简介","slug":"Hilo 相关简介","date":"2016-12-11T16:00:00.000Z","updated":"2016-12-14T08:34:38.000Z","comments":true,"path":"2016/12/12/Hilo 相关简介/","link":"","permalink":"https://motionvisions.github.io/2016/12/12/Hilo 相关简介/","excerpt":"","text":"Hilo 阿里H5游戏引擎简介最近找了一些与动画相关的资料，希望以后WAP的H5活动可以做一些比较炫酷的动画。目前找到了3个可供选择的动画库，下面重点介绍一些第一个Hilo。 Hilo 阿里开源动画框架 （有API, 应该阿里的开发者会长期维护，就是例子不多，支持多种渲染方式支持Canvas,Webgl,Dom） Agile 一个叫A-jie的人写的 （没有API，但是看源码也很容易上手，且例子多，不支持多种渲染方式，设计初衷就是为了不用Canvas） Collie（Adobe出的一个动画框架，有很多例子，有api, 还没来得及使用） ​ 下面简单介绍一下，各个库: Hilo Hilo，一套HTML5跨终端的互动游戏解决方案。Hilo支持了多届淘宝&amp;天猫狂欢城等双十一大型和日常营销活动。内核极简，提供包括DOM，Canvas，Flash，WebGL等多种渲染方案，满足全终端和性能要求。支持多种模块范式的包装版本以及开放的扩展方式，方便接入和扩展。提供对2D物理，骨骼动画的内建和扩展支持。另外，Hilo提供丰富的周边工具及开发案例。目前，Hilo已经开源，并入到Hilo Team中。开源地址 https://github.com/hiloteam/Hilo （欢迎Star） Hilo采用极简的内核。核心模块包括基础类工具（Class），事件系统（EventMixin），渲染（Render）和可视对象（View），如下图所示。 Hilo 最大的特点在于它的多种渲染方式,它提供DOM，Canvas，Flash，WebGL等多种渲染方案，可以做到跨全端，高性能的要求,之前天猫双11的喵喵舞、双11互动城、红包雨都是用它实现的。在Hilo官网的例子里面有个flappybird 游戏实现的小案例，代码很少可以看下，感觉很赞。但是在实现一些想要的动画效果时，自己还是觉得Canvas动画比较难控制，因为你画的元素在element里面看不到。我用renderType为dom的方式写了个下面的小例子供大家上手参考：（可以先大致看一下Hilo 的API） Codepen 查看地址 大致讲一下这个小例子用到的一些方法： 重点提下Hilo的View类 Hilo的可视对象的基础类是View类。View 在表现上就是一个个矩形，无论图片还是文字都可以使用一个最小的矩形包裹。在这些可视对象上做平移，旋转，缩放，透明处理等操作就可以实现普通动画的绝大部分。View实现了可视对象展示的基本问题。 类似地，根据不同View的其他展示特性，Hilo扩展出舞台Stage，位图Bitmap，画图Graphic，精灵动画Sprite等类型。 补充几点，我个人觉得使用上不是特别方便的几点 我们所有可视的元素基类都是View, 这个View的配置项里面有几个非常重要的与定位相关的信息。在dom渲染模式下我们的元素position都是absolute的，我们位置信息里的x,y 指的是transform里面的x与y. 配置信息里面有pivotX,pivotY指的是transform-origin的x与y。 pivotX与pivotY 的值不支持百分数，且默认并不在元素的中心点的位置，而是在(0,0)的位置，这也意味着我们设置元素的pivotX,pivotY 为50% 50% 时，需要去根据这个元素的宽度和高度进行计算。（对于上面提到的这点：Agile这个框架就方便很多）function main()&#123; var resources = [ &#123;id:'car1', src:'images/car1.png'&#125;, &#123;id:'car2', src:'images/car2.png'&#125;, &#123;id:'tree1', src:'images/tree1.png'&#125;, &#123;id:'tree2', src:'images/tree2.png'&#125;, &#123;id:'wheel', src:'images/wheel.png'&#125; ]; loadResources(resources, init);&#125;function loadResources(resources, cb)&#123; //使用Hilo的LoadQueue类去加载我们要使用的资源 queueRes = new Hilo.LoadQueue(); queueRes.add(resources); queueRes.on('complete', cb); queueRes.start(); &#125; function init()&#123; var gameContainer = document.getElementById(\"game-container\"), containerWidth = window.innerWidth, containerHeight = window.innerHeight; //init stage //初始化我们的舞台容器，我们所有的View类元素都会放入这个容器 stage = new Hilo.Stage(&#123; renderType:'dom', container: gameContainer, width: containerWidth, height: containerHeight &#125;); //绘制road并将它添加到舞台容器 var road = new Hilo.View(&#123; renderType:'dom', width:containerWidth, height:360, background:'rgb(7,51,105)', y:containerHeight - 360 &#125;).addTo(stage); //绘制car //drawCar(type,carX, carHeight, containerHeight) drawCar(1, 50, 144, containerHeight, 360); drawCar(2, 350, 144, containerHeight, 360); //绘制树 addTree(containerHeight, containerWidth, 360); //就像上篇Canvas动画谈到的那样，我们所有的动画都是通过不断地计时去做一些操作 var ticker = new Hilo.Ticker(20); ticker.addTick(stage); ticker.addTick(Hilo.Tween); ticker.start(); &#125; function addTree(containerHeight, containerWidth, roadHeight) &#123; for (var i = 0; i &lt; 5; i++) &#123; var index = Math.round(Math.random() * 2), fx,tx; if(index == 0) index =2; var tree = new Hilo.Bitmap(&#123; //获取资源队列中的对应资源 image: queueRes.get('tree'+index).content &#125;); tree.x = Math.random()*containerWidth + tree.width/2; tree.scaleX = tree.scaleY = Math.random()*.7+.3; tree.y = containerHeight - roadHeight - (tree.height*tree.scaleY); tree.addTo(stage); interlude(tree); function interlude(tree)&#123; var fx = Math.random() * containerWidth + tree.width / 2; var tx = -fx + Math.max(containerWidth * 2, containerWidth + tree.width / 2 + fx); tree.scaleX = tree.scaleY = Math.random()*.7+.3; tree.y = containerHeight - roadHeight - (tree.height*tree.scaleY); Hilo.Tween.fromTo( tree, &#123;x: -fx&#125;, &#123;x: tx&#125;, &#123;duration: 3000, ease: Hilo.Ease.Linear.EaseNone, onComplete: function()&#123; interlude(tree); &#125;&#125; ); &#125; &#125; &#125; //绘制汽车 function drawCar(type,carX, carHeight, containerHeight, roadHeight)&#123; //wheel图片的相关信息 var wheel = &#123; width: 53,height:53 &#125;; //先绘制carContainer 作为car的容器，然后向carContainer里面添加carBody和carWheel if(type == 1)&#123; var carContainer = new Hilo.Container(&#123; x: carX+100, y: containerHeight - roadHeight - carHeight - 25 &#125;); &#125;else&#123; var carContainer = new Hilo.Container(&#123; x: carX, y: containerHeight - roadHeight - carHeight - 25 &#125;); &#125; //绘制车身 var carBody = new Hilo.Bitmap(&#123; image: queueRes.get('car'+type).content, rect:[0,0,257,144] &#125;); //绘制wheel_左边 var wheel_l = new Hilo.Bitmap(&#123; image: queueRes.get('wheel').content, x: 30 + wheel.width/2, y: carHeight, pivotX: wheel.width/2, pivotY: wheel.height/2 &#125;); //绘制wheel_右边 var wheel_r = new Hilo.Bitmap(&#123; image: queueRes.get('wheel').content, x: 175+ wheel.width/2, y: carHeight, pivotX: wheel.width/2, pivotY: wheel.height/2 &#125;); //移动wheel_l //Tween.to(target, toProps, params) Tween类型动画 Hilo.Tween.to( wheel_l, &#123; rotation: wheel_l.rotation - 360 &#125;, &#123; duration:200, loop:true, reverse:false &#125; ); Hilo.Tween.to( wheel_r, &#123; rotation: wheel_r.rotation - 360 &#125;, &#123; duration:200, loop:true, reverse:false &#125; ); //carBody的上下移动 Hilo.Tween.to( carBody, &#123; y:carBody.y + 6 &#125;, &#123; duration: 600, loop: true, reverse: true &#125; ); //CarContainer的上下移动 if(type == 1)&#123; Hilo.Tween.to( carContainer, &#123; x: carContainer.x + 100 &#125;, &#123; duration: 500, loop:true, reverse:true, ease:Hilo.Ease.Linear.EaseNone &#125; ); &#125;else&#123; Hilo.Tween.to( carContainer, &#123; x: carContainer.x &#125;, &#123; delay: 200, duration: 500, loop:true, reverse:true, ease:Hilo.Ease.Linear.EaseNone &#125; ); &#125; carContainer.addChild(carBody); carContainer.addChild(wheel_l); carContainer.addChild(wheel_r); carContainer.addTo(stage); &#125;","categories":[{"name":"技术文章","slug":"技术文章","permalink":"https://motionvisions.github.io/categories/技术文章/"}],"tags":[{"name":"动画框架","slug":"动画框架","permalink":"https://motionvisions.github.io/tags/动画框架/"}]},{"title":"Canvas上绘制动画","slug":"Canvas上绘制动画","date":"2016-12-01T16:00:00.000Z","updated":"2016-12-09T03:43:13.000Z","comments":true,"path":"2016/12/02/Canvas上绘制动画/","link":"","permalink":"https://motionvisions.github.io/2016/12/02/Canvas上绘制动画/","excerpt":"","text":"Canvas上绘制精灵图的一帧我们知道我们需要调用drawImage 在画布上去绘制一个图片，那如果我们要绘制一个动图我们需要如何实现呢？我们要获取精灵图片对应的那一帧，然后在画布上绘制。每次绘制一帧，我们需要先清空原先画布上的内容 1void ctx.drawImage(iamge. sx, sy, sWidth, sHeight, dx, dy, dWidth, dHeight) 注意: sx,sy 是指源精灵图片获取的位置， dx,dy 指的是在画布上需要对应的位置，所以我们写一个Sprite 类，这个类一般要描述下面这些信息 12345678910111213141516171819202122232425262728293031323334var bird_opt = &#123; image: image, startX: 100, //绘制的起始坐标X startY: 100, //绘制的起始坐标Y rect: &#123;x:0,y:0,w:86,h:60&#125;, frames: [ //精灵动画每一帧的相关信息 &#123;x:0,y:0,w:86,h:60&#125;, &#123;x:0,y:60,w:86,h:60&#125;, &#123;x:0,y:120,w:86,h:60&#125; ] &#125;;function Sprite(opt)&#123; var sprite_proto = &#123;&#125;; sprite_proto.current_frame_index = 0; sprite_proto.image = opt.image; sprite_proto.rect = opt.rect; sprite_proto.frames = opt.frames; sprite_proto.startX = opt.startX; sprite_proto.startY = opt.startY; sprite_proto.getNextFrame = function()&#123; var curFrame = this.frames[this.current_frame_index]; this.current_frame_index++; if(this.current_frame_index == this.frames.length) this.current_frame_index = 0; return curFrame; &#125; return sprite_proto; &#125; 我们再创建一个绘制画布类DrawCanvas, 主要需要两个方法，一个是renderFrame（绘制精灵的某帧）, 一个是清空画布clear 12345678910111213141516171819202122232425function DrawCanvas(opt)&#123; this.context = opt.context; this.width = opt.width; this.height = opt.height; &#125; DrawCanvas.prototype.renderFrame = function(sprite)&#123; var frame = sprite.getNextFrame(); this.context.drawImage( sprite.image, frame.x, frame.y, frame.w, frame.h, sprite.startX, sprite.startY, sprite.rect.w, sprite.rect.h ); &#125; DrawCanvas.prototype.clear = function()&#123; this.context.clearRect(0,0,this.width, this.height); &#125; 结合上面两个类，我们就可以再画布上先绘制精灵图的第一帧 1234567891011121314151617181920212223242526var image = new Image(); image.src = '/images/bird.png'; image.onload = function()&#123; var bird_opt = &#123; image: image, startX: 100, startY: 100, rect: &#123;x:0,y:0,w:86,h:60&#125;, frames: [ &#123;x:0,y:0,w:86,h:60&#125;, &#123;x:0,y:60,w:86,h:60&#125;, &#123;x:0,y:120,w:86,h:60&#125; ] &#125;, birdSprite = Sprite(bird_opt), canvas = document.getElementById('canvas'), canvas_opt = &#123; context: canvas.getContext('2d'), width:canvas.width, height:canvas.height &#125;; var myCanvas = new DrawCanvas(canvas_opt); myCanvas.renderFrame(birdSprite); &#125;; Canvas 上让精灵图动起来我们需要绘制我们的精灵图，那么我们需要setInterval清空我们的画布，绘制对应帧数的图片。 1234567//canvas上动画的绘制是通过计时器去实现的 setInterval(function()&#123; myCanvas.clear(); myCanvas.renderFrame(birdSprite); &#125;, 200);//但其实做动画的最佳循环是使用requestAnimationFrame,所以我们换种写法 注意：我们创建我们的sprite之前我们需要预先将我们使用的图片下载完，所以我们需要 12345var image = new Image();image.src = '/images/bird.png';image.onload = function()&#123; .....&#125; 所以在下一篇文章里我们会看到相关框架里面会实现preload，预先加载所有要使用的资源然后再开始绘制。以上，就是canvas动画主要的实现原理。如果想要我们的动画在不同方向上再进行移动，即我们只要不断更改我们绘制坐标位置即可。 拓展阅读1：canvas动画优化小议 拓展阅读2：提高 HTML5 画布性能 拓展阅读里面提到我们对动画可以分层，让不同频率的动画绘制在不同的图层上，同时我们对这一次图层的变化与上一次图层的内容进行对比，找出变化的区域，这也是我们称为的脏区域，这样只要更新脏区域的内容，就能提升canvas的性能了。 ​ RequestAnimationFrame 与setInterval setTimeout 区别我们以前做动画的时候，都知道要动画流畅，需要让页面1s渲染60帧，所以我们的时间间隔会设置为1/60*1000 = 16 ms 。再后来看到的文章都指出，动画不要使用setInterval或者setTimeout 去实现我们想要的效果，而应该使用RAF,那RAF和setTimeout 与 setInterval的区别到底在哪里？ RequestAnimationFrame 与setInterval setTimeout 区别 setInterval和setTimeout 在非当前窗口，或者浏览器‘休眠’的时候，即使渲染停止了，但是计时器不会休息，仍然会顽强的跑着！这样会加大浏览器的负担影响页面性能。 第二个不同在于callback队列的不同： 我们假设这里有3个循环计数器的实现，A是利用RAF的递归调用做的，B是用setInterval + 16ms做的，C是用setTimeout + 16ms + 递归调用实现的。然后用这3个计步器来做一个callback的循环调用。同时假设这个callback执行消耗的时间固定为100ms。那么我们可以大致猜想一下 B在做这件事情的具体过程：B从时间零点开始第一次执行callback，16ms之后发现应该执行第二次了，但是发现第一次还没做完，于是还是得继续第一次没做完的事情，把第二次callback排到自己的一个计划队列里面，等到第一次执行完了再执行队列里的第二次…但是恶性循环，32ms之后，第一次的事情还没做完，第3次的任务又来了。。。于是，这个任务队列越来越长，越来越长。。。而对于A而言每一次任务的完成仍然需要100ms，但是浏览器不会在A没有完成当前任务的时候给它下一次的任务。也就是说A总是花100ms完成一次任务，然后再花100ms完成下一次任务。 结论：A完成10此任务的时间应该是1000ms，但是B和C完成10次任务的总时间应该需要&gt;=1000ms，因为他们还要分心去管理他们的任务队列 关于FramePerSecond和deltaTime FPS: Frame Per Second 1s的帧数 dt: Delta Time 1帧与1帧之间的时间间隔 结论： 理论上 1s/FPS = dt 123456789var start = (+new Date), dt, now;(function loop()&#123; requestAnimationFrame(function()&#123; now = (+new Date); dt = now - start; start = now; &#125;); &#125;)(); 通过FPS与dt可以用来反映动画的流畅程度，那对于程序而言dt 可以干什么呢？ 程序里dt(deltaTime)的作用？dt 在我们控制物体移动时有巨大的作用，举个例子： 假设我们在性能好的机器和性能差一些的机器上同时测试一个游戏。好的机器的FPS稳定在60，差的机器FPS稳定在30。就像上面Canvas实现的bird动画里面，我们在每帧的update如果都给它的纵向移动距离+1 12&gt; bird.y +=1&gt; &gt; 那么在性能好的机子上，1s可以达到60帧，60帧以后bird纵向距离移动了60；但是在差的机子上，1s可能只有30帧，30帧以后bird纵向距离移动了30，这显然并不科学！ 所以我们只要 12&gt; bird.y += dt*60&gt; &gt; 性能好的机子上dt = 1/60 性能差的机子上dt = 1/30 ，性能好的机子上每帧移动1，性能差的机子上每帧移动2，这样最后的位置是一致的","categories":[{"name":"技术文章","slug":"技术文章","permalink":"https://motionvisions.github.io/categories/技术文章/"}],"tags":[{"name":"canvas","slug":"canvas","permalink":"https://motionvisions.github.io/tags/canvas/"}]},{"title":"淘宝购物节","slug":"CSS 3D实现虚拟全景探究-展示","date":"2016-11-27T16:00:00.000Z","updated":"2016-12-28T07:13:19.000Z","comments":true,"path":"2016/11/28/CSS 3D实现虚拟全景探究-展示/","link":"/pages/3dvirtual/index.html","permalink":"https://motionvisions.github.io/2016/11/28/CSS 3D实现虚拟全景探究-展示/","excerpt":"","text":"","categories":[{"name":"动效展示","slug":"动效展示","permalink":"https://motionvisions.github.io/categories/动效展示/"}],"tags":[{"name":"CSS3","slug":"CSS3","permalink":"https://motionvisions.github.io/tags/CSS3/"},{"name":"3D","slug":"3D","permalink":"https://motionvisions.github.io/tags/3D/"}]},{"title":"CSS 3D实现虚拟全景探究","slug":"CSS 3D实现虚拟全景探究","date":"2016-11-27T16:00:00.000Z","updated":"2016-12-15T07:06:32.000Z","comments":true,"path":"2016/11/28/CSS 3D实现虚拟全景探究/","link":"","permalink":"https://motionvisions.github.io/2016/11/28/CSS 3D实现虚拟全景探究/","excerpt":"","text":"随着移动设备的发展，手机浏览器的兼容性已经变得比较令人满意，绝大部分CSS3属性和HTML5 API已经被移动浏览器支持。今年淘宝造物节的H5活动宣传页实现的3D虚拟全景令人感到惊艳。本文就是来探究如何利用CSS3 和 HTML5 API来实现一个基于浏览器的虚拟全景。 几个例子话不多说，先上例子。 第一个就是2016年的淘宝造物节。 第二个是腾讯在2014年世界互联网大会上制作的公司介绍页。 核心技术介绍主要的核心技术包括CSS3几个有关2D/3D transform的属性和HTML5设备陀螺仪API。 模拟视距的变化(translateZ, perspective) translateZ是指物体距离屏幕所在平面的前后距离。正值时，物体在屏幕所在平面之前；负值时，物体在屏幕所在平面之后。默认值为0，即物体在屏幕所在平面上。 perspective是指人眼距离屏幕的距离，同时是否设置perspective的值也是浏览器用来判断是否开启3D视角：也就是说CSS3 transform由2D transform 变成了3D transform。默认值为none或者0，即不开启3D视角。 perspective-origin是指视线直视屏幕上的点所在的位置。默认值为50% 50%，即观察点在屏幕中央。 具体意义可以参考下图。 模拟视角的变化(rotateX, rotateY, rotateZ)模拟人视角变化主要利用到了transform中的rotateX, rotateY, rotateZ三个属性。通过这三个属性可以模拟人眼在与屏幕平行位置移动时观察屏幕内物体的视觉效果。假设屏幕里有一个正方形。那么可以通过rotateX来模拟人上下移动时观察物体的效果；通过rotateY来模拟人左右移动时观察物体的效果；通过rotateZ来模拟人在倾斜时（比如扭头）观察物体的效果.具体效果如下所示。 模拟真实世界光照模型(transform-style)在计算机图形学里，学习过光线跟踪算法(Ray Tracing)和辐射度算法(Radiosity)来计算模拟物体在真实世界的遮挡阴影效果。而在浏览器默认状态下，dom结构的中元素是根据其在文档流中的先后顺序来确定遮盖关系的，这显然与真实世界不相符。真实世界中，一般都是视距近的物体会遮挡视觉远的物体。可以通过设置transform-style的值来开启模拟真实世界的光照模型（主要是物体遮挡效果，不包括散射、折射、阴影等）。transform-style只有两个值：默认值为flat，即不开启；开启则值设为preserve-3d。 HTML5设备陀螺仪API(deviceorientation)在最开始给的两个例子里，用户可以通过扭转手机来改变屏幕中的视角。这是利用了移动设备中的陀螺仪来检测设备方向的变化。在前端可以通过监听Deviceorientation Event来实现实时获取设备方向的变化。12345678if (window.DeviceOrientationEvent) &#123; window.addEventListener('deviceorientation', function(evt) &#123; var alpha = evt.alpha, beta = evt.beta, gamma = evt.gamma;&#125; else &#123; alert('浏览器不支持设备方向api');&#125; 由上面的代码可以看出： 可以通过window.DeviceOrientationEvent对象的存在与否来判断浏览器是否支持H5中的设备方向陀螺仪API。 可以从EventHandle参数中的Event对象中获得alpha, beta, gamma三个属性，这三个属性分别的代表了设备在空间坐标系上三个维度上方向的改变。alpha的取值范围为0~360，beta的取值范围为-90~90，gamma的取值范围为-180~180。三个属性全为0代表设备水平放置与地面平行，具体意义可以参考下图。 除了deviceorientation之外，HTML5设备陀螺仪API还支持DeviceMotion Events用来获取设备的移动加速度等信息（典型应用：摇一摇）。 具体实现虚拟全景的实现类似于google街景地图（原理链接）。简单来说，就是需要将360°的景物平面图片拼成一个立体球形，然后将人的视角放在球的内部，这样当视角360°移动时，就会看到某个方向上的景物，形成3D的视觉效果。 所以搭建一个虚拟全景的步骤可以分为如下几个步骤： 获取图片，拼接成球； 定位观察点； 移动视角产生3D效果。图片的拼接由于真实情况下，获取的图片的都是平面的、不连续的，所以在拼接时，其实是在用多面体模拟真实环境的球体（面越多模拟效果越好）。那么如何将一系列的图片在屏幕中拼接成一个球型呢？这就要用到上面提到的模拟视角变化的3D transform中的rotateY和translateZ属性，通过改变各个图片rotateY和translateZ的值，来将所有图片拼接成一个首位相连的多面体。下面举例说明。该拼接过程的例子引自这篇文章。假设现在有9张系列全景图片，每张的长和宽都为210px。那么可以将其拼接成一个9面体来模拟球体，如下图所示。 第一步：为了实现拼接，则需要1~9张图片的rotateY值分别取0, 40deg, 80deg, 120deg, ….. ,320deg（从0开始，每次递增360°/n，n为n面体（不包括上下两个面））。 第二步：在设置了图片的rotateY值后，还需要将每个图片向外移动一定距离，来将各个图片首尾相连最终拼接成一个多面体。该距离等于所要构成的多面体的半径（通过设置图片translateZ的值），来将各个图片最终拼接成一个多面体。多面体半径的计算过程如下图所示。 下面的代码用动画演示了上面所描述的如何将图片拼接成多面体的两个步骤。 观察点的定位在构建起多边体后，下一步需要将人的视角放在多边体的内部，来产生围绕四周360°的全景效果。这里由于视角的位置（perspective的值）一般是固定不变的，所以通过改变多面体父元素（可以认为是舞台stage）的translateZ属性的值来整体移动舞台，将视角置于多面体之内。还是以上面的例子来说明，上面视角的perspective的值为1000px，多面体的每个面的translateZ的值为288px，那么舞台translateZ的值在[712px, 1288px]区间内都可以满足视角在多面体之内，具体的值可以根据所要展示的效果的来调整。 视角移动DEMO基于上面的介绍，下面来简单实现淘宝购物节的部分效果。 素材的准备与处理 首先原始图片素材为文章头图给出的造物节全景图图片（图片要是首尾相连的，以保证视图的连续性）。该图片尺寸为2580px宽、1170px高。将其按纵列切分为20等分，每份的宽为129px。 然后将十张图片拼接成一个20面体。根据上面的公式，可以得知十张图片的rotateY值分别取0, 20deg, 40deg, 60deg, ….. ,340deg；图片translateZ的值即多面体的半径为407px。 除此之外，为了观察图片没覆盖的区域的美观，还要准备一张整个环境的背景图。此外，淘宝购物节在多面体的顶部和底部空白处还加了相关LOGO图，如下所示。","categories":[{"name":"技术文章","slug":"技术文章","permalink":"https://motionvisions.github.io/categories/技术文章/"}],"tags":[{"name":"CSS3","slug":"CSS3","permalink":"https://motionvisions.github.io/tags/CSS3/"},{"name":"3D","slug":"3D","permalink":"https://motionvisions.github.io/tags/3D/"}]},{"title":"snabbtJS","slug":"snabbtJS","date":"2016-11-27T16:00:00.000Z","updated":"2016-12-28T09:46:36.000Z","comments":true,"path":"2016/11/28/snabbtJS/","link":"http://daniel-lundin.github.io/snabbt.js/","permalink":"https://motionvisions.github.io/2016/11/28/snabbtJS/","excerpt":"","text":"","categories":[{"name":"动效库及工具","slug":"动效库及工具","permalink":"https://motionvisions.github.io/categories/动效库及工具/"}],"tags":[{"name":"CSS3","slug":"CSS3","permalink":"https://motionvisions.github.io/tags/CSS3/"},{"name":"3D","slug":"3D","permalink":"https://motionvisions.github.io/tags/3D/"}]}]}