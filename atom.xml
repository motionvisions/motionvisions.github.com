<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>考拉动效</title>
  <subtitle>考拉前端团队 KAOLA-FED</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://motionvisions.github.io/"/>
  <updated>2016-12-07T01:40:03.000Z</updated>
  <id>https://motionvisions.github.io/</id>
  
  <author>
    <name>KAOLA FED</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Hello World</title>
    <link href="https://motionvisions.github.io/2016/12/07/hello-world/"/>
    <id>https://motionvisions.github.io/2016/12/07/hello-world/</id>
    <published>2016-12-06T20:20:10.000Z</published>
    <updated>2016-12-07T01:40:03.000Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="http://hexo.io/" target="_blank" rel="external">Hexo</a>! This is your very first post. Check <a href="http://hexo.io/docs/" target="_blank" rel="external">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="http://hexo.io/docs/troubleshooting.html" target="_blank" rel="external">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="external">GitHub</a>.</p>
<p><img src="//img.alicdn.com/tfs/TB1_ZnHNXXXXXXBXpXXXXXXXXXX-900-500.jpg" alt="图标" title="图标"></p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo new <span class="string">"My New Post"</span></div></pre></td></tr></table></figure>
<p>More info: <a href="http://hexo.io/docs/writing.html" target="_blank" rel="external">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo server</div></pre></td></tr></table></figure>
<p>More info: <a href="http://hexo.io/docs/server.html" target="_blank" rel="external">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo generate</div></pre></td></tr></table></figure>
<p>More info: <a href="http://hexo.io/docs/generating.html" target="_blank" rel="external">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo deploy</div></pre></td></tr></table></figure>
<p>More info: <a href="http://hexo.io/docs/deployment.html" target="_blank" rel="external">Deployment</a></p>
<h2 id="Quick-Start-1"><a href="#Quick-Start-1" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post-1"><a href="#Create-a-new-post-1" class="headerlink" title="Create a new post"></a>Create a new post</h3><h3 id="Create-a-new-post-2"><a href="#Create-a-new-post-2" class="headerlink" title="Create a new post"></a>Create a new post</h3><h3 id="Create-a-new-post-3"><a href="#Create-a-new-post-3" class="headerlink" title="Create a new post"></a>Create a new post</h3><h2 id="Quick-Start-2"><a href="#Quick-Start-2" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post-4"><a href="#Create-a-new-post-4" class="headerlink" title="Create a new post"></a>Create a new post</h3><h3 id="Create-a-new-post-5"><a href="#Create-a-new-post-5" class="headerlink" title="Create a new post"></a>Create a new post</h3><h3 id="Create-a-new-post-6"><a href="#Create-a-new-post-6" class="headerlink" title="Create a new post"></a>Create a new post</h3>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Welcome to &lt;a href=&quot;http://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;http://hexo.io
    
    </summary>
    
      <category term="技术文章" scheme="https://motionvisions.github.io/categories/%E6%8A%80%E6%9C%AF%E6%96%87%E7%AB%A0/"/>
    
    
      <category term="ADFA tags tags" scheme="https://motionvisions.github.io/tags/ADFA-tags-tags/"/>
    
  </entry>
  
  <entry>
    <title>Canvas上绘制动画</title>
    <link href="https://motionvisions.github.io/2016/12/02/Canvas%E4%B8%8A%E7%BB%98%E5%88%B6%E5%8A%A8%E7%94%BB/"/>
    <id>https://motionvisions.github.io/2016/12/02/Canvas上绘制动画/</id>
    <published>2016-12-01T16:00:00.000Z</published>
    <updated>2016-12-09T03:43:13.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Canvas上绘制精灵图的一帧"><a href="#Canvas上绘制精灵图的一帧" class="headerlink" title="Canvas上绘制精灵图的一帧"></a>Canvas上绘制精灵图的一帧</h3><p>我们知道我们需要调用drawImage 在画布上去绘制一个图片，那如果我们要绘制一个动图我们需要如何实现呢？我们要获取精灵图片对应的那一帧，然后在画布上绘制。每次绘制一帧，我们需要先清空原先画布上的内容</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">void</span> ctx.drawImage(iamge. sx, sy, sWidth, sHeight, dx, dy, dWidth, dHeight)</div></pre></td></tr></table></figure>
<p><img src="https://mdn.mozillademos.org/files/225/Canvas_drawimage.jpg" alt=""></p>
<p>注意: sx,sy 是指源精灵图片获取的位置， dx,dy 指的是在画布上需要对应的位置，所以我们写一个Sprite 类，这个类一般要描述下面这些信息</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> bird_opt = &#123;</div><div class="line">            <span class="attr">image</span>: image,</div><div class="line">            <span class="attr">startX</span>: <span class="number">100</span>, <span class="comment">//绘制的起始坐标X</span></div><div class="line">            startY: <span class="number">100</span>, <span class="comment">//绘制的起始坐标Y</span></div><div class="line">            rect: &#123;<span class="attr">x</span>:<span class="number">0</span>,<span class="attr">y</span>:<span class="number">0</span>,<span class="attr">w</span>:<span class="number">86</span>,<span class="attr">h</span>:<span class="number">60</span>&#125;,</div><div class="line">            <span class="attr">frames</span>: [ <span class="comment">//精灵动画每一帧的相关信息</span></div><div class="line">                        &#123;<span class="attr">x</span>:<span class="number">0</span>,<span class="attr">y</span>:<span class="number">0</span>,<span class="attr">w</span>:<span class="number">86</span>,<span class="attr">h</span>:<span class="number">60</span>&#125;,</div><div class="line">                        &#123;<span class="attr">x</span>:<span class="number">0</span>,<span class="attr">y</span>:<span class="number">60</span>,<span class="attr">w</span>:<span class="number">86</span>,<span class="attr">h</span>:<span class="number">60</span>&#125;,</div><div class="line">                        &#123;<span class="attr">x</span>:<span class="number">0</span>,<span class="attr">y</span>:<span class="number">120</span>,<span class="attr">w</span>:<span class="number">86</span>,<span class="attr">h</span>:<span class="number">60</span>&#125;</div><div class="line">                    ]</div><div class="line">        &#125;;</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Sprite</span>(<span class="params">opt</span>)</span>&#123;</div><div class="line">        <span class="keyword">var</span> sprite_proto = &#123;&#125;;</div><div class="line">         sprite_proto.current_frame_index = <span class="number">0</span>;</div><div class="line">         sprite_proto.image = opt.image;</div><div class="line">         sprite_proto.rect = opt.rect;</div><div class="line">         sprite_proto.frames = opt.frames;</div><div class="line">         sprite_proto.startX = opt.startX;</div><div class="line">         sprite_proto.startY = opt.startY;</div><div class="line"></div><div class="line">         sprite_proto.getNextFrame = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">            <span class="keyword">var</span> curFrame = <span class="keyword">this</span>.frames[<span class="keyword">this</span>.current_frame_index];</div><div class="line">            <span class="keyword">this</span>.current_frame_index++;</div><div class="line"></div><div class="line">            <span class="keyword">if</span>(<span class="keyword">this</span>.current_frame_index ==  <span class="keyword">this</span>.frames.length) </div><div class="line">            <span class="keyword">this</span>.current_frame_index = <span class="number">0</span>;</div><div class="line"></div><div class="line">            <span class="keyword">return</span> curFrame;                </div><div class="line">         &#125;</div><div class="line"></div><div class="line">         <span class="keyword">return</span> sprite_proto;</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<p>我们再创建一个绘制画布类DrawCanvas, 主要需要两个方法，一个是renderFrame（绘制精灵的某帧）, 一个是清空画布clear</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">DrawCanvas</span>(<span class="params">opt</span>)</span>&#123;</div><div class="line">        <span class="keyword">this</span>.context = opt.context;</div><div class="line">        <span class="keyword">this</span>.width = opt.width;</div><div class="line">        <span class="keyword">this</span>.height = opt.height;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    DrawCanvas.prototype.renderFrame = <span class="function"><span class="keyword">function</span>(<span class="params">sprite</span>)</span>&#123;</div><div class="line">        <span class="keyword">var</span> frame = sprite.getNextFrame();</div><div class="line"></div><div class="line">        <span class="keyword">this</span>.context.drawImage(</div><div class="line">                sprite.image,</div><div class="line">                frame.x,</div><div class="line">                frame.y,</div><div class="line">                frame.w,</div><div class="line">                frame.h,</div><div class="line">                sprite.startX,</div><div class="line">                sprite.startY,</div><div class="line">                sprite.rect.w,</div><div class="line">                sprite.rect.h</div><div class="line">        );</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    DrawCanvas.prototype.clear = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">         <span class="keyword">this</span>.context.clearRect(<span class="number">0</span>,<span class="number">0</span>,<span class="keyword">this</span>.width, <span class="keyword">this</span>.height);   </div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<p>结合上面两个类，我们就可以再画布上先绘制精灵图的第一帧</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> image = <span class="keyword">new</span> Image();</div><div class="line">    image.src = <span class="string">'/images/bird.png'</span>;</div><div class="line"></div><div class="line">    image.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">        <span class="keyword">var</span> bird_opt = &#123;</div><div class="line">                <span class="attr">image</span>: image,</div><div class="line">                <span class="attr">startX</span>: <span class="number">100</span>,</div><div class="line">                <span class="attr">startY</span>: <span class="number">100</span>,</div><div class="line">                <span class="attr">rect</span>: &#123;<span class="attr">x</span>:<span class="number">0</span>,<span class="attr">y</span>:<span class="number">0</span>,<span class="attr">w</span>:<span class="number">86</span>,<span class="attr">h</span>:<span class="number">60</span>&#125;,</div><div class="line">                <span class="attr">frames</span>: [</div><div class="line">                            &#123;<span class="attr">x</span>:<span class="number">0</span>,<span class="attr">y</span>:<span class="number">0</span>,<span class="attr">w</span>:<span class="number">86</span>,<span class="attr">h</span>:<span class="number">60</span>&#125;,</div><div class="line">                            &#123;<span class="attr">x</span>:<span class="number">0</span>,<span class="attr">y</span>:<span class="number">60</span>,<span class="attr">w</span>:<span class="number">86</span>,<span class="attr">h</span>:<span class="number">60</span>&#125;,</div><div class="line">                            &#123;<span class="attr">x</span>:<span class="number">0</span>,<span class="attr">y</span>:<span class="number">120</span>,<span class="attr">w</span>:<span class="number">86</span>,<span class="attr">h</span>:<span class="number">60</span>&#125;</div><div class="line">                        ]</div><div class="line">            &#125;,</div><div class="line">            birdSprite = Sprite(bird_opt),</div><div class="line">            canvas = <span class="built_in">document</span>.getElementById(<span class="string">'canvas'</span>),</div><div class="line">            canvas_opt = &#123;</div><div class="line">                <span class="attr">context</span>: canvas.getContext(<span class="string">'2d'</span>),</div><div class="line">                <span class="attr">width</span>:canvas.width,</div><div class="line">                <span class="attr">height</span>:canvas.height</div><div class="line">            &#125;;</div><div class="line"></div><div class="line">        <span class="keyword">var</span> myCanvas = <span class="keyword">new</span> DrawCanvas(canvas_opt);</div><div class="line">        myCanvas.renderFrame(birdSprite);     </div><div class="line">    &#125;;</div></pre></td></tr></table></figure>
<h3 id="Canvas-上让精灵图动起来"><a href="#Canvas-上让精灵图动起来" class="headerlink" title="Canvas 上让精灵图动起来"></a>Canvas 上让精灵图动起来</h3><p>我们需要绘制我们的精灵图，那么我们需要setInterval清空我们的画布，绘制对应帧数的图片。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//canvas上动画的绘制是通过计时器去实现的</span></div><div class="line">        setInterval(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">            myCanvas.clear();</div><div class="line">            myCanvas.renderFrame(birdSprite); </div><div class="line">        &#125;, <span class="number">200</span>);</div><div class="line"></div><div class="line"><span class="comment">//但其实做动画的最佳循环是使用requestAnimationFrame,所以我们换种写法</span></div></pre></td></tr></table></figure>
<p>注意：我们创建我们的sprite之前我们需要预先将我们使用的图片下载完，所以我们需要</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> image = <span class="keyword">new</span> Image();</div><div class="line">image.src = <span class="string">'/images/bird.png'</span>;</div><div class="line">image.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">  	.....</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>所以在下一篇文章里我们会看到相关框架里面会实现preload，预先加载所有要使用的资源然后再开始绘制。以上，就是canvas动画主要的实现原理。如果想要我们的动画在不同方向上再进行移动，即我们只要不断更改我们绘制坐标位置即可。</p>
<p><a href="http://www.alloyteam.com/2013/12/canvas-animation-optimized-discussion/" target="_blank" rel="external">拓展阅读1：canvas动画优化小议</a></p>
<p><a href="https://www.html5rocks.com/zh/tutorials/canvas/performance/" target="_blank" rel="external">拓展阅读2：提高 HTML5 画布性能</a></p>
<ul>
<li><p>拓展阅读里面提到我们对动画可以分层，让不同频率的动画绘制在不同的图层上，同时我们对这一次图层的变化与上一次图层的内容进行对比，找出变化的区域，这也是我们称为的脏区域，这样只要更新脏区域的内容，就能提升canvas的性能了。</p>
<p>​</p>
</li>
</ul>
<h3 id="RequestAnimationFrame-与setInterval-setTimeout-区别"><a href="#RequestAnimationFrame-与setInterval-setTimeout-区别" class="headerlink" title="RequestAnimationFrame 与setInterval  setTimeout 区别"></a>RequestAnimationFrame 与setInterval  setTimeout 区别</h3><p>我们以前做动画的时候，都知道要动画流畅，需要让页面1s渲染60帧，所以我们的时间间隔会设置为1/60*1000 =  16 ms 。再后来看到的文章都指出，动画不要使用setInterval或者setTimeout 去实现我们想要的效果，而应该使用RAF,那RAF和setTimeout 与 setInterval的区别到底在哪里？</p>
<h4 id="RequestAnimationFrame-与setInterval-setTimeout-区别-1"><a href="#RequestAnimationFrame-与setInterval-setTimeout-区别-1" class="headerlink" title="RequestAnimationFrame 与setInterval  setTimeout 区别"></a>RequestAnimationFrame 与setInterval  setTimeout 区别</h4><ul>
<li><p>setInterval和setTimeout 在非当前窗口，或者浏览器‘休眠’的时候，即使渲染停止了，但是计时器不会休息，仍然会顽强的跑着！这样会加大浏览器的负担影响页面性能。</p>
</li>
<li><p>第二个不同在于callback队列的不同：</p>
<blockquote>
<p>我们假设这里有3个循环计数器的实现，A是利用RAF的递归调用做的，B是用setInterval + 16ms做的，C是用setTimeout + 16ms + 递归调用实现的。<br>然后用这3个计步器来做一个callback的循环调用。同时假设这个callback执行消耗的时间固定为100ms。<br>那么我们可以大致猜想一下 B在做这件事情的具体过程：<br>B从时间零点开始第一次执行callback，16ms之后发现应该执行第二次了，但是发现第一次还没做完，于是还是得继续第一次没做完的事情，把第二次callback排到自己的一个计划队列里面，等到第一次执行完了再执行队列里的第二次…<br>但是恶性循环，32ms之后，第一次的事情还没做完，第3次的任务又来了。。。<br>于是，这个任务队列越来越长，越来越长。。。<br>而对于A而言每一次任务的完成仍然需要100ms，但是浏览器不会在A没有完成当前任务的时候给它下一次的任务。也就是说A总是花100ms完成一次任务，然后再花100ms完成下一次任务。</p>
</blockquote>
</li>
</ul>
<p><strong>结论：A完成10此任务的时间应该是1000ms，但是B和C完成10次任务的总时间应该需要&gt;=1000ms，因为他们还要分心去管理他们的任务队列</strong></p>
<h3 id="关于FramePerSecond和deltaTime"><a href="#关于FramePerSecond和deltaTime" class="headerlink" title="关于FramePerSecond和deltaTime"></a>关于FramePerSecond和deltaTime</h3><ul>
<li><strong>FPS: </strong>Frame Per Second 1s的帧数</li>
<li><strong>dt:</strong> Delta Time 1帧与1帧之间的时间间隔</li>
<li><strong>结论： 理论上 1s/FPS = dt</strong></li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> start = (+<span class="keyword">new</span> <span class="built_in">Date</span>), dt, now;</div><div class="line"></div><div class="line">(<span class="function"><span class="keyword">function</span> <span class="title">loop</span>(<span class="params"></span>)</span>&#123; </div><div class="line">  requestAnimationFrame(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    now = (+<span class="keyword">new</span> <span class="built_in">Date</span>);</div><div class="line">  	dt = now - start;</div><div class="line">  	start = now;</div><div class="line">  &#125;); </div><div class="line">&#125;)();</div></pre></td></tr></table></figure>
<ul>
<li>通过FPS与dt可以用来反映动画的流畅程度，那对于程序而言dt 可以干什么呢？</li>
</ul>
<h4 id="程序里dt-deltaTime-的作用？"><a href="#程序里dt-deltaTime-的作用？" class="headerlink" title="程序里dt(deltaTime)的作用？"></a>程序里dt(deltaTime)的作用？</h4><p>dt 在我们控制物体移动时有巨大的作用，举个例子：</p>
<blockquote>
<p>假设我们在性能好的机器和性能差一些的机器上同时测试一个游戏。好的机器的FPS稳定在60，差的机器FPS稳定在30。<br>就像上面Canvas实现的bird动画里面，我们在每帧的update如果都给它的纵向移动距离+1</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">&gt; bird.y +=<span class="number">1</span></div><div class="line">&gt;</div></pre></td></tr></table></figure>
</blockquote>
<p>&gt;</p>
<blockquote>
<p>那么在性能好的机子上，1s可以达到60帧，60帧以后bird纵向距离移动了60；但是在差的机子上，1s可能只有30帧，30帧以后bird纵向距离移动了30，这显然并不科学！</p>
<p>所以我们只要</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">&gt; bird.y += dt*<span class="number">60</span></div><div class="line">&gt;</div></pre></td></tr></table></figure>
</blockquote>
<p>&gt;</p>
<blockquote>
<p>性能好的机子上dt = 1/60 性能差的机子上dt = 1/30 ，性能好的机子上每帧移动1，性能差的机子上每帧移动2，这样最后的位置是一致的</p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;Canvas上绘制精灵图的一帧&quot;&gt;&lt;a href=&quot;#Canvas上绘制精灵图的一帧&quot; class=&quot;headerlink&quot; title=&quot;Canvas上绘制精灵图的一帧&quot;&gt;&lt;/a&gt;Canvas上绘制精灵图的一帧&lt;/h3&gt;&lt;p&gt;我们知道我们需要调用drawImag
    
    </summary>
    
      <category term="技术文章" scheme="https://motionvisions.github.io/categories/%E6%8A%80%E6%9C%AF%E6%96%87%E7%AB%A0/"/>
    
    
      <category term="canvas" scheme="https://motionvisions.github.io/tags/canvas/"/>
    
  </entry>
  
  <entry>
    <title>CSS 3D实现虚拟全景探究</title>
    <link href="https://motionvisions.github.io/2016/11/28/CSS%203D%E5%AE%9E%E7%8E%B0%E8%99%9A%E6%8B%9F%E5%85%A8%E6%99%AF%E6%8E%A2%E7%A9%B6/"/>
    <id>https://motionvisions.github.io/2016/11/28/CSS 3D实现虚拟全景探究/</id>
    <published>2016-11-27T16:00:00.000Z</published>
    <updated>2016-12-11T09:57:53.000Z</updated>
    
    <content type="html"><![CDATA[<p><div style="width:80%;margin:0 auto;"><img src="http://haitao.nos.netease.com/ecd06b4b7add4a2a927fea9cd318886f.jpg" alt="" title="文章缩略图"><br></div><br>随着移动设备的发展，手机浏览器的兼容性已经变得比较令人满意，绝大部分CSS3属性和HTML5 API已经被移动浏览器支持。今年淘宝造物节的H5活动宣传页实现的3D虚拟全景令人感到惊艳。本文就是来探究如何利用CSS3 和 HTML5 API来实现一个基于浏览器的虚拟全景。</p>
<h2 id="几个例子"><a href="#几个例子" class="headerlink" title="几个例子"></a>几个例子</h2><p>话不多说，先上例子。</p>
<ol>
<li>第一个就是2016年的<a href="http://show.im20.com.cn/zwj/" title="1. 淘宝造物节" target="_blank" rel="external">淘宝造物节</a>。</li>
<li>第二个是腾讯在2014年世界互联网大会上制作的<a href="http://wic.tencent.com/" title="公司介绍页" target="_blank" rel="external">公司介绍页</a>。</li>
</ol>
<h2 id="核心技术"><a href="#核心技术" class="headerlink" title="核心技术"></a>核心技术</h2><p>主要的核心技术包括CSS3几个有关2D/3D transform的属性和HTML5设备陀螺仪API。</p>
<h3 id="模拟视距的变化-translateZ-perspective"><a href="#模拟视距的变化-translateZ-perspective" class="headerlink" title="模拟视距的变化(translateZ, perspective)"></a>模拟视距的变化(<strong>translateZ, perspective</strong>)</h3><ul>
<li><strong>translateZ</strong>是指物体距离屏幕前后的距离。默认值为0，即物体就在屏幕所在平面上。</li>
<li><strong>perspective</strong>是指人眼距离屏幕的距离，同时是否设置<strong>perspective</strong>的值也是浏览器用来判断是否开启3D视角：也就是说<strong>CSS3 transform</strong>由<strong>2D transform </strong>变成了<strong>3D transform</strong>。默认值为none或者0，即不开启3D视角。</li>
<li><strong>perspective-origin</strong>是指视线直视屏幕上的点所在的位置。默认值为50% 50%，即观察点在屏幕中央。</li>
</ul>
<h3 id="模拟视角的变化-rotateX-rotateY-rotateZ"><a href="#模拟视角的变化-rotateX-rotateY-rotateZ" class="headerlink" title="模拟视角的变化(rotateX, rotateY, rotateZ)"></a>模拟视角的变化(<strong>rotateX, rotateY, rotateZ</strong>)</h3><p>模拟人视角变化主要利用到了<strong>transform</strong>中的<strong>rotateX, rotateY, rotateZ</strong>三个属性。通过这三个属性可以模拟人眼在与屏幕平行位置移动时观察屏幕内物体的视觉效果。<br>假设屏幕里有一个正方形。那么可以通过<strong>rotateX</strong>来模拟人上下移动时观察物体的效果；通过<strong>rotateY</strong>来模拟人左右移动时观察物体的效果；通过<strong>rotateZ</strong>来模拟人在倾斜时（比如扭头）观察物体的效果.具体效果如下所示。<br><img src="http://haitao.nos.netease.com/3c9cf180cf1d46ecaede900e67c40f7f.jpg" alt="" title="文章缩略图"></p>
<iframe height="265" scrolling="no" title="WoyqwQ" src="//codepen.io/ccfe/embed/WoyqwQ/?height=265&theme-id=0&default-tab=css,result&embed-version=2" frameborder="no" allowtransparency="true" allowfullscreen="true" style="width: 100%;">See the Pen <a href="http://codepen.io/ccfe/pen/WoyqwQ/" target="_blank" rel="external">WoyqwQ</a> by ccfe (<a href="http://codepen.io/ccfe" target="_blank" rel="external">@ccfe</a>) on <a href="http://codepen.io" target="_blank" rel="external">CodePen</a>.<br></iframe>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;div style=&quot;width:80%;margin:0 auto;&quot;&gt;&lt;img src=&quot;http://haitao.nos.netease.com/ecd06b4b7add4a2a927fea9cd318886f.jpg&quot; alt=&quot;&quot; title=&quot;文章缩略图&quot;&gt;
    
    </summary>
    
      <category term="技术文章" scheme="https://motionvisions.github.io/categories/%E6%8A%80%E6%9C%AF%E6%96%87%E7%AB%A0/"/>
    
    
      <category term="CSS3" scheme="https://motionvisions.github.io/tags/CSS3/"/>
    
      <category term="3D" scheme="https://motionvisions.github.io/tags/3D/"/>
    
  </entry>
  
</feed>
