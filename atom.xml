<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>考拉动效</title>
  <subtitle>考拉前端团队 KAOLA-FED</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://motionvisions.github.io/"/>
  <updated>2016-12-28T12:10:31.000Z</updated>
  <id>https://motionvisions.github.io/</id>
  
  <author>
    <name>KAOLA FED</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>hilo赛车动画</title>
    <link href="https://motionvisions.github.io/2016/12/12/Hilo%20%E7%9B%B8%E5%85%B3%E7%AE%80%E4%BB%8B-%E5%B1%95%E7%A4%BA/"/>
    <id>https://motionvisions.github.io/2016/12/12/Hilo 相关简介-展示/</id>
    <published>2016-12-11T16:00:00.000Z</published>
    <updated>2016-12-28T12:10:31.000Z</updated>
    
    <content type="html"><![CDATA[<div style="width:80%;margin:0 auto;display: none;"><img src="http://haitao.nosdn4.127.net/1482926576912popo_2016-12-28_19-57-47.jpg" alt="" title="文章缩略图"></div>
]]></content>
    
    <summary type="html">
    
      &lt;div style=&quot;width:80%;margin:0 auto;display: none;&quot;&gt;&lt;img src=&quot;http://haitao.nosdn4.127.net/1482926576912popo_2016-12-28_19-57-47.jpg&quot; alt=&quot;&quot;
    
    </summary>
    
      <category term="动效展示" scheme="https://motionvisions.github.io/categories/%E5%8A%A8%E6%95%88%E5%B1%95%E7%A4%BA/"/>
    
    
      <category term="动画框架" scheme="https://motionvisions.github.io/tags/%E5%8A%A8%E7%94%BB%E6%A1%86%E6%9E%B6/"/>
    
  </entry>
  
  <entry>
    <title>Hilo 阿里H5游戏引擎简介</title>
    <link href="https://motionvisions.github.io/2016/12/12/Hilo%20%E7%9B%B8%E5%85%B3%E7%AE%80%E4%BB%8B/"/>
    <id>https://motionvisions.github.io/2016/12/12/Hilo 相关简介/</id>
    <published>2016-12-11T16:00:00.000Z</published>
    <updated>2016-12-14T08:34:38.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Hilo-阿里H5游戏引擎简介"><a href="#Hilo-阿里H5游戏引擎简介" class="headerlink" title="Hilo 阿里H5游戏引擎简介"></a>Hilo 阿里H5游戏引擎简介</h3><p>最近找了一些与动画相关的资料，希望以后WAP的H5活动可以做一些比较炫酷的动画。目前找到了3个可供选择的动画库，下面重点介绍一些第一个Hilo。</p>
<ul>
<li><p>Hilo 阿里开源动画框架 （有API, 应该阿里的开发者会长期维护，就是例子不多，支持多种渲染方式支持Canvas,Webgl,Dom）</p>
</li>
<li><p>Agile 一个叫A-jie的人写的 （没有API，但是看源码也很容易上手，且例子多，不支持多种渲染方式，设计初衷就是为了不用Canvas）</p>
</li>
<li><p>Collie（Adobe出的一个动画框架，有很多例子，有api, 还没来得及使用）</p>
<p>​</p>
</li>
</ul>
<p>下面简单介绍一下，各个库:</p>
<h4 id="Hilo"><a href="#Hilo" class="headerlink" title="Hilo"></a>Hilo</h4><blockquote>
<p><a href="https://github.com/hiloteam/Hilo" target="_blank" rel="external">Hilo</a>，一套HTML5跨终端的互动游戏解决方案。Hilo支持了多届淘宝&amp;天猫狂欢城等双十一大型和日常营销活动。内核极简，提供包括DOM，Canvas，Flash，WebGL等多种渲染方案，满足全终端和性能要求。支持多种模块范式的包装版本以及开放的扩展方式，方便接入和扩展。提供对2D物理，骨骼动画的内建和扩展支持。另外，Hilo提供丰富的周边工具及开发案例。目前，Hilo已经开源，并入到Hilo Team中。开源地址 <a href="https://github.com/hiloteam/Hilo" target="_blank" rel="external">https://github.com/hiloteam/Hilo</a> （欢迎Star）</p>
</blockquote>
<p>Hilo采用极简的内核。核心模块包括基础类工具（Class），事件系统（EventMixin），渲染（Render）和可视对象（View），如下图所示。</p>
<p><img src="https://camo.githubusercontent.com/3fa3b6d70a06f6e2390ba3b3f29fdd1e448ec085/687474703a2f2f696d67312e746263646e2e636e2f4c312f3436312f312f343734303365323034343963396431313630616434383138373962303263643936663239393864392e706e67" alt="Hilo 结构图"></p>
<p>Hilo 最大的特点在于它的多种渲染方式,它提供DOM，Canvas，Flash，WebGL等多种渲染方案，可以做到跨全端，高性能的要求,之前天猫双11的喵喵舞、双11互动城、红包雨都是用它实现的。在Hilo官网的例子里面有个flappybird 游戏实现的小案例，代码很少可以看下，感觉很赞。但是在实现一些想要的动画效果时，自己还是觉得Canvas动画比较难控制，因为你画的元素在element里面看不到。我用renderType为dom的方式写了个下面的小例子供大家上手参考：（可以先大致看一下Hilo 的API）</p>
<p><a href="http://codepen.io/anon/pen/KNxqGM?editors=1010" target="_blank" rel="external">Codepen 查看地址</a></p>
<p>大致讲一下这个小例子用到的一些方法：</p>
<ul>
<li><p>重点提下Hilo的View类</p>
<blockquote>
<p>Hilo的可视对象的基础类是View类。View 在表现上就是一个个矩形，无论图片还是文字都可以使用一个最小的矩形包裹。在这些可视对象上做平移，旋转，缩放，透明处理等操作就可以实现普通动画的绝大部分。View实现了可视对象展示的基本问题。</p>
</blockquote>
</li>
</ul>
<p><img src="https://camo.githubusercontent.com/64e91e6c395b071f69392399ab7dbeef69dc5966/687474703a2f2f696d67322e746263646e2e636e2f4c312f3436312f312f653764343666653363373564633732653438396565323937616566646264316539336363313939622e706e67" alt=""></p>
<p><img src="https://camo.githubusercontent.com/4e8559ac1d2b5defcf404854fa173cb407f5c286/687474703a2f2f696d67312e746263646e2e636e2f4c312f3436312f312f656335626631633135613833303462653337306533393332653565396237613932393762306462382e706e67" alt=""><br>类似地，根据不同View的其他展示特性，Hilo扩展出舞台Stage，位图Bitmap，画图Graphic，精灵动画Sprite等类型。</p>
<ul>
<li><p>补充几点，我个人觉得使用上不是特别方便的几点</p>
<ul>
<li><p>我们所有可视的元素基类都是View, 这个View的配置项里面有几个非常重要的与定位相关的信息。在dom渲染模式下我们的元素position都是absolute的，我们位置信息里的x,y 指的是transform里面的x与y. 配置信息里面有pivotX,pivotY指的是transform-origin的x与y。</p>
</li>
<li><p>pivotX与pivotY 的值不支持百分数，且默认并不在元素的中心点的位置，而是在(0,0)的位置，这也意味着我们设置元素的pivotX,pivotY 为50% 50% 时，需要去根据这个元素的宽度和高度进行计算。（对于上面提到的这点：Agile这个框架就方便很多）</p>
</li>
</ul>
</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div><div class="line">182</div><div class="line">183</div><div class="line">184</div><div class="line">185</div><div class="line">186</div><div class="line">187</div><div class="line">188</div><div class="line">189</div><div class="line">190</div><div class="line">191</div><div class="line">192</div><div class="line">193</div><div class="line">194</div><div class="line">195</div><div class="line">196</div><div class="line">197</div><div class="line">198</div><div class="line">199</div><div class="line">200</div><div class="line">201</div><div class="line">202</div><div class="line">203</div><div class="line">204</div><div class="line">205</div><div class="line">206</div><div class="line">207</div><div class="line">208</div><div class="line">209</div><div class="line">210</div><div class="line">211</div><div class="line">212</div><div class="line">213</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">main</span>(<span class="params"></span>)</span>&#123;</div><div class="line">  <span class="keyword">var</span> resources = [</div><div class="line">            &#123;<span class="attr">id</span>:<span class="string">'car1'</span>, <span class="attr">src</span>:<span class="string">'images/car1.png'</span>&#125;,</div><div class="line">            &#123;<span class="attr">id</span>:<span class="string">'car2'</span>, <span class="attr">src</span>:<span class="string">'images/car2.png'</span>&#125;,</div><div class="line">            &#123;<span class="attr">id</span>:<span class="string">'tree1'</span>, <span class="attr">src</span>:<span class="string">'images/tree1.png'</span>&#125;,</div><div class="line">            &#123;<span class="attr">id</span>:<span class="string">'tree2'</span>, <span class="attr">src</span>:<span class="string">'images/tree2.png'</span>&#125;,</div><div class="line">            &#123;<span class="attr">id</span>:<span class="string">'wheel'</span>, <span class="attr">src</span>:<span class="string">'images/wheel.png'</span>&#125;</div><div class="line">        ];</div><div class="line"></div><div class="line">        loadResources(resources, init);</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">loadResources</span>(<span class="params">resources, cb</span>)</span>&#123;</div><div class="line">  		<span class="comment">//使用Hilo的LoadQueue类去加载我们要使用的资源</span></div><div class="line">        queueRes = <span class="keyword">new</span> Hilo.LoadQueue();</div><div class="line">        queueRes.add(resources);</div><div class="line">        queueRes.on(<span class="string">'complete'</span>, cb);</div><div class="line">        queueRes.start();</div><div class="line"> &#125;</div><div class="line"></div><div class="line"> <span class="function"><span class="keyword">function</span> <span class="title">init</span>(<span class="params"></span>)</span>&#123;</div><div class="line">        <span class="keyword">var</span> gameContainer = <span class="built_in">document</span>.getElementById(<span class="string">"game-container"</span>),</div><div class="line">            containerWidth = <span class="built_in">window</span>.innerWidth,</div><div class="line">            containerHeight = <span class="built_in">window</span>.innerHeight;</div><div class="line"></div><div class="line">        <span class="comment">//init stage</span></div><div class="line">   		<span class="comment">//初始化我们的舞台容器，我们所有的View类元素都会放入这个容器</span></div><div class="line">        stage = <span class="keyword">new</span> Hilo.Stage(&#123;</div><div class="line">            <span class="attr">renderType</span>:<span class="string">'dom'</span>,</div><div class="line">            <span class="attr">container</span>: gameContainer,</div><div class="line">            <span class="attr">width</span>: containerWidth,</div><div class="line">            <span class="attr">height</span>: containerHeight</div><div class="line">        &#125;);</div><div class="line"></div><div class="line"></div><div class="line">        <span class="comment">//绘制road并将它添加到舞台容器</span></div><div class="line">        <span class="keyword">var</span> road = <span class="keyword">new</span> Hilo.View(&#123;</div><div class="line">           <span class="attr">renderType</span>:<span class="string">'dom'</span>,</div><div class="line">           <span class="attr">width</span>:containerWidth,</div><div class="line">           <span class="attr">height</span>:<span class="number">360</span>,</div><div class="line">           <span class="attr">background</span>:<span class="string">'rgb(7,51,105)'</span>,</div><div class="line">           <span class="attr">y</span>:containerHeight - <span class="number">360</span></div><div class="line">        &#125;).addTo(stage);</div><div class="line"></div><div class="line"></div><div class="line">        <span class="comment">//绘制car</span></div><div class="line">        <span class="comment">//drawCar(type,carX, carHeight, containerHeight)</span></div><div class="line">        drawCar(<span class="number">1</span>, <span class="number">50</span>, <span class="number">144</span>, containerHeight, <span class="number">360</span>);</div><div class="line">        drawCar(<span class="number">2</span>, <span class="number">350</span>, <span class="number">144</span>, containerHeight, <span class="number">360</span>);</div><div class="line"></div><div class="line">        <span class="comment">//绘制树</span></div><div class="line">        addTree(containerHeight, containerWidth, <span class="number">360</span>);</div><div class="line"></div><div class="line"></div><div class="line">        <span class="comment">//就像上篇Canvas动画谈到的那样，我们所有的动画都是通过不断地计时去做一些操作</span></div><div class="line">        <span class="keyword">var</span> ticker = <span class="keyword">new</span> Hilo.Ticker(<span class="number">20</span>);</div><div class="line">        ticker.addTick(stage);</div><div class="line">        ticker.addTick(Hilo.Tween);</div><div class="line">        ticker.start();</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">addTree</span>(<span class="params">containerHeight, containerWidth, roadHeight</span>) </span>&#123;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</div><div class="line">            <span class="keyword">var</span> index = <span class="built_in">Math</span>.round(<span class="built_in">Math</span>.random() * <span class="number">2</span>),</div><div class="line">                fx,tx;</div><div class="line">            <span class="keyword">if</span>(index == <span class="number">0</span>) index =<span class="number">2</span>;</div><div class="line">            <span class="keyword">var</span> tree = <span class="keyword">new</span> Hilo.Bitmap(&#123;</div><div class="line">                <span class="comment">//获取资源队列中的对应资源</span></div><div class="line">                image: queueRes.get(<span class="string">'tree'</span>+index).content</div><div class="line">            &#125;);</div><div class="line"></div><div class="line"></div><div class="line">            tree.x = <span class="built_in">Math</span>.random()*containerWidth + tree.width/<span class="number">2</span>;</div><div class="line">            tree.scaleX = tree.scaleY = <span class="built_in">Math</span>.random()*<span class="number">.7</span>+<span class="number">.3</span>;</div><div class="line">            tree.y = containerHeight - roadHeight - (tree.height*tree.scaleY);</div><div class="line">            tree.addTo(stage);</div><div class="line">            interlude(tree);</div><div class="line"></div><div class="line">            <span class="function"><span class="keyword">function</span> <span class="title">interlude</span>(<span class="params">tree</span>)</span>&#123;</div><div class="line">                <span class="keyword">var</span> fx = <span class="built_in">Math</span>.random() * containerWidth + tree.width / <span class="number">2</span>;</div><div class="line">                <span class="keyword">var</span> tx = -fx + <span class="built_in">Math</span>.max(containerWidth * <span class="number">2</span>, containerWidth + tree.width / <span class="number">2</span> + fx);</div><div class="line">                tree.scaleX = tree.scaleY = <span class="built_in">Math</span>.random()*<span class="number">.7</span>+<span class="number">.3</span>;</div><div class="line">                tree.y = containerHeight - roadHeight - (tree.height*tree.scaleY);</div><div class="line">                Hilo.Tween.fromTo(</div><div class="line">                        tree, &#123;<span class="attr">x</span>: -fx&#125;, &#123;<span class="attr">x</span>: tx&#125;,</div><div class="line">                        &#123;<span class="attr">duration</span>: <span class="number">3000</span>, <span class="attr">ease</span>: Hilo.Ease.Linear.EaseNone, <span class="attr">onComplete</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">                            interlude(tree);</div><div class="line">                        &#125;&#125;</div><div class="line">                );</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">//绘制汽车</span></div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">drawCar</span>(<span class="params">type,carX, carHeight, containerHeight, roadHeight</span>)</span>&#123;</div><div class="line">        <span class="comment">//wheel图片的相关信息</span></div><div class="line">        <span class="keyword">var</span> wheel = &#123;</div><div class="line">            <span class="attr">width</span>: <span class="number">53</span>,<span class="attr">height</span>:<span class="number">53</span></div><div class="line">        &#125;;</div><div class="line"></div><div class="line"></div><div class="line">        <span class="comment">//先绘制carContainer 作为car的容器，然后向carContainer里面添加carBody和carWheel</span></div><div class="line">        <span class="keyword">if</span>(type == <span class="number">1</span>)&#123;</div><div class="line">            <span class="keyword">var</span> carContainer = <span class="keyword">new</span> Hilo.Container(&#123;</div><div class="line">                <span class="attr">x</span>: carX+<span class="number">100</span>,</div><div class="line">                <span class="attr">y</span>: containerHeight - roadHeight - carHeight - <span class="number">25</span></div><div class="line">            &#125;);</div><div class="line">        &#125;<span class="keyword">else</span>&#123;</div><div class="line">            <span class="keyword">var</span> carContainer = <span class="keyword">new</span> Hilo.Container(&#123;</div><div class="line">                <span class="attr">x</span>: carX,</div><div class="line">                <span class="attr">y</span>: containerHeight - roadHeight - carHeight - <span class="number">25</span></div><div class="line">            &#125;);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="comment">//绘制车身</span></div><div class="line">        <span class="keyword">var</span> carBody = <span class="keyword">new</span> Hilo.Bitmap(&#123;</div><div class="line">            <span class="attr">image</span>: queueRes.get(<span class="string">'car'</span>+type).content,</div><div class="line">            <span class="attr">rect</span>:[<span class="number">0</span>,<span class="number">0</span>,<span class="number">257</span>,<span class="number">144</span>]</div><div class="line">        &#125;);</div><div class="line"></div><div class="line">        <span class="comment">//绘制wheel_左边</span></div><div class="line">        <span class="keyword">var</span> wheel_l = <span class="keyword">new</span> Hilo.Bitmap(&#123;</div><div class="line">            <span class="attr">image</span>:  queueRes.get(<span class="string">'wheel'</span>).content,</div><div class="line">            <span class="attr">x</span>: <span class="number">30</span> + wheel.width/<span class="number">2</span>,</div><div class="line">            <span class="attr">y</span>: carHeight,</div><div class="line">            <span class="attr">pivotX</span>: wheel.width/<span class="number">2</span>,</div><div class="line">            <span class="attr">pivotY</span>: wheel.height/<span class="number">2</span></div><div class="line">        &#125;);</div><div class="line"></div><div class="line">        <span class="comment">//绘制wheel_右边</span></div><div class="line">        <span class="keyword">var</span> wheel_r = <span class="keyword">new</span> Hilo.Bitmap(&#123;</div><div class="line">            <span class="attr">image</span>:  queueRes.get(<span class="string">'wheel'</span>).content,</div><div class="line">            <span class="attr">x</span>: <span class="number">175</span>+ wheel.width/<span class="number">2</span>,</div><div class="line">            <span class="attr">y</span>: carHeight,</div><div class="line">            <span class="attr">pivotX</span>: wheel.width/<span class="number">2</span>,</div><div class="line">            <span class="attr">pivotY</span>: wheel.height/<span class="number">2</span></div><div class="line">        &#125;);</div><div class="line"></div><div class="line">        <span class="comment">//移动wheel_l</span></div><div class="line">        <span class="comment">//Tween.to(target, toProps, params) Tween类型动画</span></div><div class="line">        Hilo.Tween.to(</div><div class="line">                wheel_l,</div><div class="line">                &#123;</div><div class="line">                    <span class="attr">rotation</span>: wheel_l.rotation - <span class="number">360</span></div><div class="line">                &#125;,</div><div class="line">                &#123;</div><div class="line">                    <span class="attr">duration</span>:<span class="number">200</span>,</div><div class="line">                    <span class="attr">loop</span>:<span class="literal">true</span>,</div><div class="line">                    <span class="attr">reverse</span>:<span class="literal">false</span></div><div class="line">                &#125;</div><div class="line">        );</div><div class="line">        Hilo.Tween.to(</div><div class="line">                wheel_r,</div><div class="line">                &#123;</div><div class="line">                    <span class="attr">rotation</span>: wheel_r.rotation - <span class="number">360</span></div><div class="line">                &#125;,</div><div class="line">                &#123;</div><div class="line">                    <span class="attr">duration</span>:<span class="number">200</span>,</div><div class="line">                    <span class="attr">loop</span>:<span class="literal">true</span>,</div><div class="line">                    <span class="attr">reverse</span>:<span class="literal">false</span></div><div class="line">                &#125;</div><div class="line">        );</div><div class="line"></div><div class="line">        <span class="comment">//carBody的上下移动</span></div><div class="line">        Hilo.Tween.to(</div><div class="line">                carBody,</div><div class="line">                &#123;</div><div class="line">                    <span class="attr">y</span>:carBody.y + <span class="number">6</span></div><div class="line">                &#125;,</div><div class="line">                &#123;</div><div class="line">                    <span class="attr">duration</span>: <span class="number">600</span>,</div><div class="line">                    <span class="attr">loop</span>: <span class="literal">true</span>,</div><div class="line">                    <span class="attr">reverse</span>: <span class="literal">true</span></div><div class="line">                &#125;</div><div class="line">        );</div><div class="line"></div><div class="line">        <span class="comment">//CarContainer的上下移动</span></div><div class="line">        <span class="keyword">if</span>(type == <span class="number">1</span>)&#123;</div><div class="line">            Hilo.Tween.to(</div><div class="line">                    carContainer,</div><div class="line">                    &#123;</div><div class="line">                        <span class="attr">x</span>: carContainer.x + <span class="number">100</span></div><div class="line">                    &#125;,</div><div class="line">                    &#123;</div><div class="line">                        <span class="attr">duration</span>: <span class="number">500</span>,</div><div class="line">                        <span class="attr">loop</span>:<span class="literal">true</span>,</div><div class="line">                        <span class="attr">reverse</span>:<span class="literal">true</span>,</div><div class="line">                        <span class="attr">ease</span>:Hilo.Ease.Linear.EaseNone</div><div class="line">                    &#125;</div><div class="line">            );</div><div class="line">        &#125;<span class="keyword">else</span>&#123;</div><div class="line">            Hilo.Tween.to(</div><div class="line">                    carContainer,</div><div class="line">                    &#123;</div><div class="line">                        <span class="attr">x</span>: carContainer.x</div><div class="line">                    &#125;,</div><div class="line">                    &#123;</div><div class="line">                        <span class="attr">delay</span>: <span class="number">200</span>,</div><div class="line">                        <span class="attr">duration</span>: <span class="number">500</span>,</div><div class="line">                        <span class="attr">loop</span>:<span class="literal">true</span>,</div><div class="line">                        <span class="attr">reverse</span>:<span class="literal">true</span>,</div><div class="line">                        <span class="attr">ease</span>:Hilo.Ease.Linear.EaseNone</div><div class="line">                    &#125;</div><div class="line">            );</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        carContainer.addChild(carBody);</div><div class="line">        carContainer.addChild(wheel_l);</div><div class="line">        carContainer.addChild(wheel_r);</div><div class="line">        carContainer.addTo(stage);</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;Hilo-阿里H5游戏引擎简介&quot;&gt;&lt;a href=&quot;#Hilo-阿里H5游戏引擎简介&quot; class=&quot;headerlink&quot; title=&quot;Hilo 阿里H5游戏引擎简介&quot;&gt;&lt;/a&gt;Hilo 阿里H5游戏引擎简介&lt;/h3&gt;&lt;p&gt;最近找了一些与动画相关的资料，希望以
    
    </summary>
    
      <category term="技术文章" scheme="https://motionvisions.github.io/categories/%E6%8A%80%E6%9C%AF%E6%96%87%E7%AB%A0/"/>
    
    
      <category term="动画框架" scheme="https://motionvisions.github.io/tags/%E5%8A%A8%E7%94%BB%E6%A1%86%E6%9E%B6/"/>
    
  </entry>
  
  <entry>
    <title>Canvas上绘制动画</title>
    <link href="https://motionvisions.github.io/2016/12/02/Canvas%E4%B8%8A%E7%BB%98%E5%88%B6%E5%8A%A8%E7%94%BB/"/>
    <id>https://motionvisions.github.io/2016/12/02/Canvas上绘制动画/</id>
    <published>2016-12-01T16:00:00.000Z</published>
    <updated>2016-12-09T03:43:13.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Canvas上绘制精灵图的一帧"><a href="#Canvas上绘制精灵图的一帧" class="headerlink" title="Canvas上绘制精灵图的一帧"></a>Canvas上绘制精灵图的一帧</h3><p>我们知道我们需要调用drawImage 在画布上去绘制一个图片，那如果我们要绘制一个动图我们需要如何实现呢？我们要获取精灵图片对应的那一帧，然后在画布上绘制。每次绘制一帧，我们需要先清空原先画布上的内容</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">void</span> ctx.drawImage(iamge. sx, sy, sWidth, sHeight, dx, dy, dWidth, dHeight)</div></pre></td></tr></table></figure>
<p><img src="https://mdn.mozillademos.org/files/225/Canvas_drawimage.jpg" alt=""></p>
<p>注意: sx,sy 是指源精灵图片获取的位置， dx,dy 指的是在画布上需要对应的位置，所以我们写一个Sprite 类，这个类一般要描述下面这些信息</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> bird_opt = &#123;</div><div class="line">            <span class="attr">image</span>: image,</div><div class="line">            <span class="attr">startX</span>: <span class="number">100</span>, <span class="comment">//绘制的起始坐标X</span></div><div class="line">            startY: <span class="number">100</span>, <span class="comment">//绘制的起始坐标Y</span></div><div class="line">            rect: &#123;<span class="attr">x</span>:<span class="number">0</span>,<span class="attr">y</span>:<span class="number">0</span>,<span class="attr">w</span>:<span class="number">86</span>,<span class="attr">h</span>:<span class="number">60</span>&#125;,</div><div class="line">            <span class="attr">frames</span>: [ <span class="comment">//精灵动画每一帧的相关信息</span></div><div class="line">                        &#123;<span class="attr">x</span>:<span class="number">0</span>,<span class="attr">y</span>:<span class="number">0</span>,<span class="attr">w</span>:<span class="number">86</span>,<span class="attr">h</span>:<span class="number">60</span>&#125;,</div><div class="line">                        &#123;<span class="attr">x</span>:<span class="number">0</span>,<span class="attr">y</span>:<span class="number">60</span>,<span class="attr">w</span>:<span class="number">86</span>,<span class="attr">h</span>:<span class="number">60</span>&#125;,</div><div class="line">                        &#123;<span class="attr">x</span>:<span class="number">0</span>,<span class="attr">y</span>:<span class="number">120</span>,<span class="attr">w</span>:<span class="number">86</span>,<span class="attr">h</span>:<span class="number">60</span>&#125;</div><div class="line">                    ]</div><div class="line">        &#125;;</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Sprite</span>(<span class="params">opt</span>)</span>&#123;</div><div class="line">        <span class="keyword">var</span> sprite_proto = &#123;&#125;;</div><div class="line">         sprite_proto.current_frame_index = <span class="number">0</span>;</div><div class="line">         sprite_proto.image = opt.image;</div><div class="line">         sprite_proto.rect = opt.rect;</div><div class="line">         sprite_proto.frames = opt.frames;</div><div class="line">         sprite_proto.startX = opt.startX;</div><div class="line">         sprite_proto.startY = opt.startY;</div><div class="line"></div><div class="line">         sprite_proto.getNextFrame = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">            <span class="keyword">var</span> curFrame = <span class="keyword">this</span>.frames[<span class="keyword">this</span>.current_frame_index];</div><div class="line">            <span class="keyword">this</span>.current_frame_index++;</div><div class="line"></div><div class="line">            <span class="keyword">if</span>(<span class="keyword">this</span>.current_frame_index ==  <span class="keyword">this</span>.frames.length) </div><div class="line">            <span class="keyword">this</span>.current_frame_index = <span class="number">0</span>;</div><div class="line"></div><div class="line">            <span class="keyword">return</span> curFrame;                </div><div class="line">         &#125;</div><div class="line"></div><div class="line">         <span class="keyword">return</span> sprite_proto;</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<p>我们再创建一个绘制画布类DrawCanvas, 主要需要两个方法，一个是renderFrame（绘制精灵的某帧）, 一个是清空画布clear</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">DrawCanvas</span>(<span class="params">opt</span>)</span>&#123;</div><div class="line">        <span class="keyword">this</span>.context = opt.context;</div><div class="line">        <span class="keyword">this</span>.width = opt.width;</div><div class="line">        <span class="keyword">this</span>.height = opt.height;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    DrawCanvas.prototype.renderFrame = <span class="function"><span class="keyword">function</span>(<span class="params">sprite</span>)</span>&#123;</div><div class="line">        <span class="keyword">var</span> frame = sprite.getNextFrame();</div><div class="line"></div><div class="line">        <span class="keyword">this</span>.context.drawImage(</div><div class="line">                sprite.image,</div><div class="line">                frame.x,</div><div class="line">                frame.y,</div><div class="line">                frame.w,</div><div class="line">                frame.h,</div><div class="line">                sprite.startX,</div><div class="line">                sprite.startY,</div><div class="line">                sprite.rect.w,</div><div class="line">                sprite.rect.h</div><div class="line">        );</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    DrawCanvas.prototype.clear = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">         <span class="keyword">this</span>.context.clearRect(<span class="number">0</span>,<span class="number">0</span>,<span class="keyword">this</span>.width, <span class="keyword">this</span>.height);   </div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<p>结合上面两个类，我们就可以再画布上先绘制精灵图的第一帧</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> image = <span class="keyword">new</span> Image();</div><div class="line">    image.src = <span class="string">'/images/bird.png'</span>;</div><div class="line"></div><div class="line">    image.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">        <span class="keyword">var</span> bird_opt = &#123;</div><div class="line">                <span class="attr">image</span>: image,</div><div class="line">                <span class="attr">startX</span>: <span class="number">100</span>,</div><div class="line">                <span class="attr">startY</span>: <span class="number">100</span>,</div><div class="line">                <span class="attr">rect</span>: &#123;<span class="attr">x</span>:<span class="number">0</span>,<span class="attr">y</span>:<span class="number">0</span>,<span class="attr">w</span>:<span class="number">86</span>,<span class="attr">h</span>:<span class="number">60</span>&#125;,</div><div class="line">                <span class="attr">frames</span>: [</div><div class="line">                            &#123;<span class="attr">x</span>:<span class="number">0</span>,<span class="attr">y</span>:<span class="number">0</span>,<span class="attr">w</span>:<span class="number">86</span>,<span class="attr">h</span>:<span class="number">60</span>&#125;,</div><div class="line">                            &#123;<span class="attr">x</span>:<span class="number">0</span>,<span class="attr">y</span>:<span class="number">60</span>,<span class="attr">w</span>:<span class="number">86</span>,<span class="attr">h</span>:<span class="number">60</span>&#125;,</div><div class="line">                            &#123;<span class="attr">x</span>:<span class="number">0</span>,<span class="attr">y</span>:<span class="number">120</span>,<span class="attr">w</span>:<span class="number">86</span>,<span class="attr">h</span>:<span class="number">60</span>&#125;</div><div class="line">                        ]</div><div class="line">            &#125;,</div><div class="line">            birdSprite = Sprite(bird_opt),</div><div class="line">            canvas = <span class="built_in">document</span>.getElementById(<span class="string">'canvas'</span>),</div><div class="line">            canvas_opt = &#123;</div><div class="line">                <span class="attr">context</span>: canvas.getContext(<span class="string">'2d'</span>),</div><div class="line">                <span class="attr">width</span>:canvas.width,</div><div class="line">                <span class="attr">height</span>:canvas.height</div><div class="line">            &#125;;</div><div class="line"></div><div class="line">        <span class="keyword">var</span> myCanvas = <span class="keyword">new</span> DrawCanvas(canvas_opt);</div><div class="line">        myCanvas.renderFrame(birdSprite);     </div><div class="line">    &#125;;</div></pre></td></tr></table></figure>
<h3 id="Canvas-上让精灵图动起来"><a href="#Canvas-上让精灵图动起来" class="headerlink" title="Canvas 上让精灵图动起来"></a>Canvas 上让精灵图动起来</h3><p>我们需要绘制我们的精灵图，那么我们需要setInterval清空我们的画布，绘制对应帧数的图片。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//canvas上动画的绘制是通过计时器去实现的</span></div><div class="line">        setInterval(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">            myCanvas.clear();</div><div class="line">            myCanvas.renderFrame(birdSprite); </div><div class="line">        &#125;, <span class="number">200</span>);</div><div class="line"></div><div class="line"><span class="comment">//但其实做动画的最佳循环是使用requestAnimationFrame,所以我们换种写法</span></div></pre></td></tr></table></figure>
<p>注意：我们创建我们的sprite之前我们需要预先将我们使用的图片下载完，所以我们需要</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> image = <span class="keyword">new</span> Image();</div><div class="line">image.src = <span class="string">'/images/bird.png'</span>;</div><div class="line">image.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">  	.....</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>所以在下一篇文章里我们会看到相关框架里面会实现preload，预先加载所有要使用的资源然后再开始绘制。以上，就是canvas动画主要的实现原理。如果想要我们的动画在不同方向上再进行移动，即我们只要不断更改我们绘制坐标位置即可。</p>
<p><a href="http://www.alloyteam.com/2013/12/canvas-animation-optimized-discussion/" target="_blank" rel="external">拓展阅读1：canvas动画优化小议</a></p>
<p><a href="https://www.html5rocks.com/zh/tutorials/canvas/performance/" target="_blank" rel="external">拓展阅读2：提高 HTML5 画布性能</a></p>
<ul>
<li><p>拓展阅读里面提到我们对动画可以分层，让不同频率的动画绘制在不同的图层上，同时我们对这一次图层的变化与上一次图层的内容进行对比，找出变化的区域，这也是我们称为的脏区域，这样只要更新脏区域的内容，就能提升canvas的性能了。</p>
<p>​</p>
</li>
</ul>
<h3 id="RequestAnimationFrame-与setInterval-setTimeout-区别"><a href="#RequestAnimationFrame-与setInterval-setTimeout-区别" class="headerlink" title="RequestAnimationFrame 与setInterval  setTimeout 区别"></a>RequestAnimationFrame 与setInterval  setTimeout 区别</h3><p>我们以前做动画的时候，都知道要动画流畅，需要让页面1s渲染60帧，所以我们的时间间隔会设置为1/60*1000 =  16 ms 。再后来看到的文章都指出，动画不要使用setInterval或者setTimeout 去实现我们想要的效果，而应该使用RAF,那RAF和setTimeout 与 setInterval的区别到底在哪里？</p>
<h4 id="RequestAnimationFrame-与setInterval-setTimeout-区别-1"><a href="#RequestAnimationFrame-与setInterval-setTimeout-区别-1" class="headerlink" title="RequestAnimationFrame 与setInterval  setTimeout 区别"></a>RequestAnimationFrame 与setInterval  setTimeout 区别</h4><ul>
<li><p>setInterval和setTimeout 在非当前窗口，或者浏览器‘休眠’的时候，即使渲染停止了，但是计时器不会休息，仍然会顽强的跑着！这样会加大浏览器的负担影响页面性能。</p>
</li>
<li><p>第二个不同在于callback队列的不同：</p>
<blockquote>
<p>我们假设这里有3个循环计数器的实现，A是利用RAF的递归调用做的，B是用setInterval + 16ms做的，C是用setTimeout + 16ms + 递归调用实现的。<br>然后用这3个计步器来做一个callback的循环调用。同时假设这个callback执行消耗的时间固定为100ms。<br>那么我们可以大致猜想一下 B在做这件事情的具体过程：<br>B从时间零点开始第一次执行callback，16ms之后发现应该执行第二次了，但是发现第一次还没做完，于是还是得继续第一次没做完的事情，把第二次callback排到自己的一个计划队列里面，等到第一次执行完了再执行队列里的第二次…<br>但是恶性循环，32ms之后，第一次的事情还没做完，第3次的任务又来了。。。<br>于是，这个任务队列越来越长，越来越长。。。<br>而对于A而言每一次任务的完成仍然需要100ms，但是浏览器不会在A没有完成当前任务的时候给它下一次的任务。也就是说A总是花100ms完成一次任务，然后再花100ms完成下一次任务。</p>
</blockquote>
</li>
</ul>
<p><strong>结论：A完成10此任务的时间应该是1000ms，但是B和C完成10次任务的总时间应该需要&gt;=1000ms，因为他们还要分心去管理他们的任务队列</strong></p>
<h3 id="关于FramePerSecond和deltaTime"><a href="#关于FramePerSecond和deltaTime" class="headerlink" title="关于FramePerSecond和deltaTime"></a>关于FramePerSecond和deltaTime</h3><ul>
<li><strong>FPS: </strong>Frame Per Second 1s的帧数</li>
<li><strong>dt:</strong> Delta Time 1帧与1帧之间的时间间隔</li>
<li><strong>结论： 理论上 1s/FPS = dt</strong></li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> start = (+<span class="keyword">new</span> <span class="built_in">Date</span>), dt, now;</div><div class="line"></div><div class="line">(<span class="function"><span class="keyword">function</span> <span class="title">loop</span>(<span class="params"></span>)</span>&#123; </div><div class="line">  requestAnimationFrame(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    now = (+<span class="keyword">new</span> <span class="built_in">Date</span>);</div><div class="line">  	dt = now - start;</div><div class="line">  	start = now;</div><div class="line">  &#125;); </div><div class="line">&#125;)();</div></pre></td></tr></table></figure>
<ul>
<li>通过FPS与dt可以用来反映动画的流畅程度，那对于程序而言dt 可以干什么呢？</li>
</ul>
<h4 id="程序里dt-deltaTime-的作用？"><a href="#程序里dt-deltaTime-的作用？" class="headerlink" title="程序里dt(deltaTime)的作用？"></a>程序里dt(deltaTime)的作用？</h4><p>dt 在我们控制物体移动时有巨大的作用，举个例子：</p>
<blockquote>
<p>假设我们在性能好的机器和性能差一些的机器上同时测试一个游戏。好的机器的FPS稳定在60，差的机器FPS稳定在30。<br>就像上面Canvas实现的bird动画里面，我们在每帧的update如果都给它的纵向移动距离+1</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">&gt; bird.y +=<span class="number">1</span></div><div class="line">&gt;</div></pre></td></tr></table></figure>
</blockquote>
<p>&gt;</p>
<blockquote>
<p>那么在性能好的机子上，1s可以达到60帧，60帧以后bird纵向距离移动了60；但是在差的机子上，1s可能只有30帧，30帧以后bird纵向距离移动了30，这显然并不科学！</p>
<p>所以我们只要</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">&gt; bird.y += dt*<span class="number">60</span></div><div class="line">&gt;</div></pre></td></tr></table></figure>
</blockquote>
<p>&gt;</p>
<blockquote>
<p>性能好的机子上dt = 1/60 性能差的机子上dt = 1/30 ，性能好的机子上每帧移动1，性能差的机子上每帧移动2，这样最后的位置是一致的</p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;Canvas上绘制精灵图的一帧&quot;&gt;&lt;a href=&quot;#Canvas上绘制精灵图的一帧&quot; class=&quot;headerlink&quot; title=&quot;Canvas上绘制精灵图的一帧&quot;&gt;&lt;/a&gt;Canvas上绘制精灵图的一帧&lt;/h3&gt;&lt;p&gt;我们知道我们需要调用drawImag
    
    </summary>
    
      <category term="技术文章" scheme="https://motionvisions.github.io/categories/%E6%8A%80%E6%9C%AF%E6%96%87%E7%AB%A0/"/>
    
    
      <category term="canvas" scheme="https://motionvisions.github.io/tags/canvas/"/>
    
  </entry>
  
  <entry>
    <title>淘宝购物节</title>
    <link href="https://motionvisions.github.io/2016/11/28/CSS%203D%E5%AE%9E%E7%8E%B0%E8%99%9A%E6%8B%9F%E5%85%A8%E6%99%AF%E6%8E%A2%E7%A9%B6-%E5%B1%95%E7%A4%BA/"/>
    <id>https://motionvisions.github.io/2016/11/28/CSS 3D实现虚拟全景探究-展示/</id>
    <published>2016-11-27T16:00:00.000Z</published>
    <updated>2016-12-28T11:46:32.000Z</updated>
    
    <content type="html"><![CDATA[<div style="width:80%;margin:0 auto;display: none;"><img src="http://haitao.nos.netease.com/ecd06b4b7add4a2a927fea9cd318886f.jpg" alt="" title="文章缩略图"></div>

<iframe class="displayWindow" id="displayWindow" scrolling="yes" title="CSS 3D实现虚拟全景探究" src="/pages/3dvirtual/index.html" frameborder="no" allowtransparency="true" allowfullscreen="false" style=""></iframe>
]]></content>
    
    <summary type="html">
    
      &lt;div style=&quot;width:80%;margin:0 auto;display: none;&quot;&gt;&lt;img src=&quot;http://haitao.nos.netease.com/ecd06b4b7add4a2a927fea9cd318886f.jpg&quot; alt=&quot;&quot; tit
    
    </summary>
    
      <category term="动效展示" scheme="https://motionvisions.github.io/categories/%E5%8A%A8%E6%95%88%E5%B1%95%E7%A4%BA/"/>
    
    
      <category term="CSS3" scheme="https://motionvisions.github.io/tags/CSS3/"/>
    
      <category term="3D" scheme="https://motionvisions.github.io/tags/3D/"/>
    
  </entry>
  
  <entry>
    <title>snabbtJS</title>
    <link href="https://motionvisions.github.io/2016/11/28/snabbtJS/"/>
    <id>https://motionvisions.github.io/2016/11/28/snabbtJS/</id>
    <published>2016-11-27T16:00:00.000Z</published>
    <updated>2016-12-28T09:46:36.000Z</updated>
    
    <content type="html"><![CDATA[<div style="width:80%;margin:0 auto;display: none;"><img src="http://haitao.nosdn1.127.net/14829181763071399853-c0ef6602e54e71ee.png" alt="" title="文章缩略图"></div>

<iframe class="displayWindow" id="displayWindow" scrolling="yes" title="CSS 3D实现虚拟全景探究" src="/pages/3dvirtual/index.html" frameborder="no" allowtransparency="true" allowfullscreen="false" style=""></iframe>
]]></content>
    
    <summary type="html">
    
      &lt;div style=&quot;width:80%;margin:0 auto;display: none;&quot;&gt;&lt;img src=&quot;http://haitao.nosdn1.127.net/14829181763071399853-c0ef6602e54e71ee.png&quot; alt=&quot;&quot;
    
    </summary>
    
      <category term="动效库及工具" scheme="https://motionvisions.github.io/categories/%E5%8A%A8%E6%95%88%E5%BA%93%E5%8F%8A%E5%B7%A5%E5%85%B7/"/>
    
    
      <category term="CSS3" scheme="https://motionvisions.github.io/tags/CSS3/"/>
    
      <category term="3D" scheme="https://motionvisions.github.io/tags/3D/"/>
    
  </entry>
  
  <entry>
    <title>CSS 3D实现虚拟全景探究</title>
    <link href="https://motionvisions.github.io/2016/11/28/CSS%203D%E5%AE%9E%E7%8E%B0%E8%99%9A%E6%8B%9F%E5%85%A8%E6%99%AF%E6%8E%A2%E7%A9%B6/"/>
    <id>https://motionvisions.github.io/2016/11/28/CSS 3D实现虚拟全景探究/</id>
    <published>2016-11-27T16:00:00.000Z</published>
    <updated>2016-12-15T07:06:32.000Z</updated>
    
    <content type="html"><![CDATA[<div style="width:80%;margin:0 auto;"><img src="http://haitao.nos.netease.com/ecd06b4b7add4a2a927fea9cd318886f.jpg" alt="" title="文章缩略图"></div>

<p>随着移动设备的发展，手机浏览器的兼容性已经变得比较令人满意，绝大部分CSS3属性和HTML5 API已经被移动浏览器支持。今年淘宝造物节的H5活动宣传页实现的3D虚拟全景令人感到惊艳。本文就是来探究如何利用CSS3 和 HTML5 API来实现一个基于浏览器的虚拟全景。</p>
<h2 id="几个例子"><a href="#几个例子" class="headerlink" title="几个例子"></a>几个例子</h2><p>话不多说，先上例子。</p>
<ol>
<li>第一个就是2016年的<a href="http://show.im20.com.cn/zwj/" title="1. 淘宝造物节" target="_blank" rel="external">淘宝造物节</a>。</li>
<li>第二个是腾讯在2014年世界互联网大会上制作的<a href="http://wic.tencent.com/" title="公司介绍页" target="_blank" rel="external">公司介绍页</a>。</li>
</ol>
<h2 id="核心技术介绍"><a href="#核心技术介绍" class="headerlink" title="核心技术介绍"></a>核心技术介绍</h2><p>主要的核心技术包括CSS3几个有关2D/3D transform的属性和HTML5设备陀螺仪API。</p>
<h3 id="模拟视距的变化-translateZ-perspective"><a href="#模拟视距的变化-translateZ-perspective" class="headerlink" title="模拟视距的变化(translateZ, perspective)"></a>模拟视距的变化(<strong>translateZ, perspective</strong>)</h3><ul>
<li><strong>translateZ</strong>是指物体距离屏幕所在平面的前后距离。正值时，物体在屏幕所在平面之前；负值时，物体在屏幕所在平面之后。默认值为0，即物体在屏幕所在平面上。</li>
<li><strong>perspective</strong>是指人眼距离屏幕的距离，同时是否设置<strong>perspective</strong>的值也是浏览器用来判断是否开启3D视角：也就是说<strong>CSS3 transform</strong>由<strong>2D transform </strong>变成了<strong>3D transform</strong>。默认值为none或者0，即不开启3D视角。</li>
<li><strong>perspective-origin</strong>是指视线直视屏幕上的点所在的位置。默认值为50% 50%，即观察点在屏幕中央。</li>
</ul>
<p>具体意义可以参考下图。</p>
<div style="width:49%;float:left;margin-bottom: 20px;"><br><img src="http://haitao.nos.netease.com/44b7683a30044764ad0f1805edf3e9d4.jpg" alt="translateZ" title="文章缩略图"></div><div style="width:49%;float:right;margin-bottom: 20px;"><br><img src="http://haitao.nos.netease.com/33a52b54064d4ce6a6540655e4214d4d.jpg" alt="perspective" title="文章缩略图"></div>

<h3 id="模拟视角的变化-rotateX-rotateY-rotateZ"><a href="#模拟视角的变化-rotateX-rotateY-rotateZ" class="headerlink" title="模拟视角的变化(rotateX, rotateY, rotateZ)"></a>模拟视角的变化(<strong>rotateX, rotateY, rotateZ</strong>)</h3><p>模拟人视角变化主要利用到了<strong>transform</strong>中的<strong>rotateX, rotateY, rotateZ</strong>三个属性。通过这三个属性可以模拟人眼在与屏幕平行位置移动时观察屏幕内物体的视觉效果。<br>假设屏幕里有一个正方形。那么可以通过<strong>rotateX</strong>来模拟人上下移动时观察物体的效果；通过<strong>rotateY</strong>来模拟人左右移动时观察物体的效果；通过<strong>rotateZ</strong>来模拟人在倾斜时（比如扭头）观察物体的效果.具体效果如下所示。</p>
<div style="width:80%;margin:0 auto;"><img src="http://haitao.nos.netease.com/3c9cf180cf1d46ecaede900e67c40f7f.jpg" alt="rotateX, rotateY, rotateZ" title="文章缩略图"></div>

<h3 id="模拟真实世界光照模型-transform-style"><a href="#模拟真实世界光照模型-transform-style" class="headerlink" title="模拟真实世界光照模型(transform-style)"></a>模拟真实世界光照模型(<strong>transform-style</strong>)</h3><p>在计算机图形学里，学习过光线跟踪算法(Ray Tracing)和辐射度算法(Radiosity)来计算模拟物体在真实世界的遮挡阴影效果。而在浏览器默认状态下，dom结构的中元素是根据其在文档流中的先后顺序来确定遮盖关系的，这显然与真实世界不相符。真实世界中，一般都是视距近的物体会遮挡视觉远的物体。<br>可以通过设置<strong>transform-style</strong>的值来开启模拟真实世界的光照模型（主要是物体遮挡效果，不包括散射、折射、阴影等）。<strong>transform-style</strong>只有两个值：默认值为flat，即不开启；开启则值设为preserve-3d。</p>
<h3 id="HTML5设备陀螺仪API-deviceorientation"><a href="#HTML5设备陀螺仪API-deviceorientation" class="headerlink" title="HTML5设备陀螺仪API(deviceorientation)"></a>HTML5设备陀螺仪API(<strong>deviceorientation</strong>)</h3><p>在最开始给的两个例子里，用户可以通过扭转手机来改变屏幕中的视角。这是利用了移动设备中的陀螺仪来检测设备方向的变化。<br>在前端可以通过监听<strong>Deviceorientation Event</strong>来实现实时获取设备方向的变化。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> (<span class="built_in">window</span>.DeviceOrientationEvent) &#123;</div><div class="line">  <span class="built_in">window</span>.addEventListener(<span class="string">'deviceorientation'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">evt</span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> alpha = evt.alpha,</div><div class="line">        beta = evt.beta,</div><div class="line">        gamma = evt.gamma;</div><div class="line">&#125; <span class="keyword">else</span> &#123;</div><div class="line">  alert(<span class="string">'浏览器不支持设备方向api'</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>由上面的代码可以看出：</p>
<ul>
<li>可以通过<strong>window.DeviceOrientationEvent</strong>对象的存在与否来判断浏览器是否支持H5中的设备方向陀螺仪API。</li>
<li>可以从EventHandle参数中的Event对象中获得<strong>alpha, beta, gamma</strong>三个属性，这三个属性分别的代表了设备在空间坐标系上三个维度上方向的改变。<strong>alpha</strong>的取值范围为<strong>0~360</strong>，<strong>beta</strong>的取值范围为<strong>-90~90</strong>，<strong>gamma</strong>的取值范围为<strong>-180~180</strong>。三个属性全为0代表设备水平放置与地面平行，具体意义可以参考下图。</li>
</ul>
<div style="width:25%;float:left;margin-bottom: 20px;padding-top: 5.5%;"><br><img src="http://haitao.nos.netease.com/8d8ed81212834ab7aefd0f0770dadbdc.png" alt="设备方向坐标" title="文章缩略图"></div><div style="width:25%;float:left;margin-bottom: 20px;"><br><img src="http://haitao.nos.netease.com/8fd982a418544955af6e82d2afc0c7b7.png" alt="alpha" title="文章缩略图"></div><div style="width:25%;float:left;margin-bottom: 20px;"><br><img src="http://haitao.nos.netease.com/9e77b0d519f444b19bb74e3f923ffd98.png" alt="beta" title="文章缩略图"></div><div style="width:25%;float:left;margin-bottom: 20px;"><br><img src="http://haitao.nos.netease.com/a83a00a432e348a0bdda18282c801aac.png" alt="gamma" title="文章缩略图"></div>

<p>除了<strong>deviceorientation</strong>之外，HTML5设备陀螺仪API还支持<strong>DeviceMotion Events</strong>用来获取设备的移动加速度等信息（典型应用：摇一摇）。</p>
<h2 id="具体实现"><a href="#具体实现" class="headerlink" title="具体实现"></a>具体实现</h2><p>虚拟全景的实现类似于google街景地图（<a href="https://developers.google.com/maps/documentation/javascript/streetview" title="原理链接" target="_blank" rel="external">原理链接</a>）。简单来说，就是需要将360°的景物平面图片拼成一个立体球形，然后将人的视角放在球的内部，这样当视角360°移动时，就会看到某个方向上的景物，形成3D的视觉效果。</p>
<div style="width:75%;margin:0 auto;"><img src="https://developers.google.com/maps/documentation/javascript/images/panoramaSphere.png" alt="将各个角度的图片拼成一个球形" title="文章缩略图"></div>

<p>所以搭建一个虚拟全景的步骤可以分为如下几个步骤：</p>
<ol>
<li>获取图片，拼接成球；</li>
<li>定位观察点；</li>
<li>移动视角产生3D效果。<h3 id="图片的拼接"><a href="#图片的拼接" class="headerlink" title="图片的拼接"></a>图片的拼接</h3>由于真实情况下，获取的图片的都是平面的、不连续的，所以在拼接时，其实是在用多面体模拟真实环境的球体（面越多模拟效果越好）。那么如何将一系列的图片在屏幕中拼接成一个球型呢？这就要用到上面提到的模拟视角变化的<strong>3D transform</strong>中的<strong>rotateY</strong>和<strong>translateZ</strong>属性，通过改变各个图片<strong>rotateY</strong>和<strong>translateZ</strong>的值，来将所有图片拼接成一个首位相连的多面体。<br>下面举例说明。该拼接过程的例子引自<a href="https://desandro.github.io/3dtransforms/docs/carousel.html" title="这篇文章" target="_blank" rel="external">这篇文章</a>。<br>假设现在有9张系列全景图片，每张的长和宽都为210px。那么可以将其拼接成一个9面体来模拟球体，如下图所示。<div style="width:75%;margin:0 auto;"><img src="http://haitao.nos.netease.com/01bfbd02bf024608ba672d517ac13587.png" alt="图片拼接成多面体俯视图" title="文章缩略图"></div></li>
</ol>
<ul>
<li>第一步：为了实现拼接，则需要1~9张图片的<strong>rotateY</strong>值分别取0, 40deg, 80deg, 120deg, ….. ,320deg（从0开始，每次递增360°/n，n为n面体（不包括上下两个面））。</li>
<li>第二步：在设置了图片的<strong>rotateY</strong>值后，还需要将每个图片向外移动一定距离，来将各个图片首尾相连最终拼接成一个多面体。该距离等于所要构成的多面体的半径（通过设置图片<strong>translateZ</strong>的值），来将各个图片最终拼接成一个多面体。多面体半径的计算过程如下图所示。</li>
</ul>
<div style="width:50%;margin:0 auto;"><img src="http://haitao.nos.netease.com/d91336b754b24184945ef40250fec9b7.png" alt="多面体半径的计算" title="文章缩略图"></div>

<p>下面的代码用动画演示了上面所描述的如何将图片拼接成多面体的两个步骤。</p>
<iframe height="500" scrolling="no" title="WoyqwQ" src="//codepen.io/ccfe/embed/WoyqwQ/?height=500&amp;theme-id=0&amp;default-tab=css,result&amp;embed-version=2" frameborder="no" allowtransparency="true" allowfullscreen="true" style="width: 100%;"></iframe>

<h3 id="观察点的定位"><a href="#观察点的定位" class="headerlink" title="观察点的定位"></a>观察点的定位</h3><p>在构建起多边体后，下一步需要将人的视角放在多边体的内部，来产生围绕四周360°的全景效果。这里由于视角的位置（<strong>perspective</strong>的值）一般是固定不变的，所以通过改变多面体父元素（可以认为是舞台stage）的<strong>translateZ</strong>属性的值来整体移动舞台，将视角置于多面体之内。<br>还是以上面的例子来说明，上面视角的<strong>perspective</strong>的值为1000px，多面体的每个面的<strong>translateZ</strong>的值为288px，那么舞台<strong>translateZ</strong>的值在[712px, 1288px]区间内都可以满足视角在多面体之内，具体的值可以根据所要展示的效果的来调整。</p>
<h3 id="视角移动"><a href="#视角移动" class="headerlink" title="视角移动"></a>视角移动</h3><h2 id="DEMO"><a href="#DEMO" class="headerlink" title="DEMO"></a>DEMO</h2><p>基于上面的介绍，下面来简单实现淘宝购物节的部分效果。</p>
<h3 id="素材的准备与处理"><a href="#素材的准备与处理" class="headerlink" title="素材的准备与处理"></a>素材的准备与处理</h3><ul>
<li>首先原始图片素材为文章头图给出的造物节全景图图片（图片要是首尾相连的，以保证视图的连续性）。该图片尺寸为2580px宽、1170px高。将其按纵列切分为20等分，每份的宽为129px。</li>
</ul>
<div style="width:80%;margin:0 auto;"><img src="http://haitao.nos.netease.com/c157852db6404599b71947394cb83d4b.jpg" alt="原始素材切图" title="文章缩略图"></div>

<ul>
<li>然后将十张图片拼接成一个20面体。根据上面的公式，可以得知十张图片的<strong>rotateY</strong>值分别取0, 20deg, 40deg, 60deg, ….. ,340deg；图片<strong>translateZ</strong>的值即多面体的半径为407px。</li>
<li>除此之外，为了观察图片没覆盖的区域的美观，还要准备一张整个环境的背景图。此外，淘宝购物节在多面体的顶部和底部空白处还加了相关LOGO图，如下所示。</li>
</ul>
<p><div style="width:100%;margin: 0 auto;"></div></p>
<p><div style="width:40%;margin: 0 6%;float:left;"><img src="http://haitao.nos.netease.com/fcaa1d192e9847fe8203424c91d9a227.jpg" alt="背景图" title="文章缩略图"></div><div style="width:34%;margin:0 7%;float:left;"><img src="http://haitao.nos.netease.com/c3b5144420ff4b59903e0486ffc11aca.png" alt="logo图" title="文章缩略图"></div><br><br><br></p>
]]></content>
    
    <summary type="html">
    
      &lt;div style=&quot;width:80%;margin:0 auto;&quot;&gt;&lt;img src=&quot;http://haitao.nos.netease.com/ecd06b4b7add4a2a927fea9cd318886f.jpg&quot; alt=&quot;&quot; title=&quot;文章缩略图&quot;&gt;&lt;/d
    
    </summary>
    
      <category term="技术文章" scheme="https://motionvisions.github.io/categories/%E6%8A%80%E6%9C%AF%E6%96%87%E7%AB%A0/"/>
    
    
      <category term="CSS3" scheme="https://motionvisions.github.io/tags/CSS3/"/>
    
      <category term="3D" scheme="https://motionvisions.github.io/tags/3D/"/>
    
  </entry>
  
</feed>
